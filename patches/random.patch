diff --git a/src/gi-stubs/repository/GLib.pyi b/src/gi-stubs/repository/GLib.pyi
index 1d52cb8..1585bcb 100644
--- a/src/gi-stubs/repository/GLib.pyi
+++ b/src/gi-stubs/repository/GLib.pyi
@@ -2,201 +2,204 @@ import typing
 from typing import Any
 from typing import Callable
 from typing import Optional
-from typing import Tuple
+from typing import tuple
 from typing import Type
 from typing import Union
+from typing import Final
+
+from collections.abc import Sequence
 
 from gi.repository import GObject
 
-ANALYZER_ANALYZING: int = 1
-ASCII_DTOSTR_BUF_SIZE: int = 39
-BIG_ENDIAN: int = 4321
-CSET_A_2_Z: str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
-CSET_DIGITS: str = "0123456789"
-CSET_a_2_z: str = "abcdefghijklmnopqrstuvwxyz"
-DATALIST_FLAGS_MASK: int = 3
-DATE_BAD_DAY: int = 0
-DATE_BAD_JULIAN: int = 0
-DATE_BAD_YEAR: int = 0
-DIR_SEPARATOR: int = 47
-DIR_SEPARATOR_S: str = "/"
-E: float = 2.718282
-GINT16_FORMAT: str = "hi"
-GINT16_MODIFIER: str = "h"
-GINT32_FORMAT: str = "i"
-GINT32_MODIFIER: str = ""
-GINT64_FORMAT: str = "li"
-GINT64_MODIFIER: str = "l"
-GINTPTR_FORMAT: str = "li"
-GINTPTR_MODIFIER: str = "l"
-GNUC_FUNCTION: str = ""
-GNUC_PRETTY_FUNCTION: str = ""
-GSIZE_FORMAT: str = "lu"
-GSIZE_MODIFIER: str = "l"
-GSSIZE_FORMAT: str = "li"
-GSSIZE_MODIFIER: str = "l"
-GUINT16_FORMAT: str = "hu"
-GUINT32_FORMAT: str = "u"
-GUINT64_FORMAT: str = "lu"
-GUINTPTR_FORMAT: str = "lu"
-HAVE_GINT64: int = 1
-HAVE_GNUC_VARARGS: int = 1
-HAVE_GNUC_VISIBILITY: int = 1
-HAVE_GROWING_STACK: int = 0
-HAVE_ISO_VARARGS: int = 1
-HOOK_FLAG_USER_SHIFT: int = 4
-IEEE754_DOUBLE_BIAS: int = 1023
-IEEE754_FLOAT_BIAS: int = 127
-IO_ERR: int = 8
-IO_FLAG_APPEND: int = 1
-IO_FLAG_GET_MASK: int = 31
-IO_FLAG_IS_READABLE: int = 4
-IO_FLAG_IS_SEEKABLE: int = 16
-IO_FLAG_IS_WRITEABLE: int = 8
-IO_FLAG_MASK: int = 31
-IO_FLAG_NONBLOCK: int = 2
-IO_FLAG_SET_MASK: int = 3
-IO_HUP: int = 16
-IO_IN: int = 1
-IO_NVAL: int = 32
-IO_OUT: int = 4
-IO_PRI: int = 2
-IO_STATUS_AGAIN: int = 3
-IO_STATUS_EOF: int = 2
-IO_STATUS_ERROR: int = 0
-IO_STATUS_NORMAL: int = 1
-KEY_FILE_DESKTOP_GROUP: str = "Desktop Entry"
-KEY_FILE_DESKTOP_KEY_ACTIONS: str = "Actions"
-KEY_FILE_DESKTOP_KEY_CATEGORIES: str = "Categories"
-KEY_FILE_DESKTOP_KEY_COMMENT: str = "Comment"
-KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: str = "DBusActivatable"
-KEY_FILE_DESKTOP_KEY_EXEC: str = "Exec"
-KEY_FILE_DESKTOP_KEY_GENERIC_NAME: str = "GenericName"
-KEY_FILE_DESKTOP_KEY_HIDDEN: str = "Hidden"
-KEY_FILE_DESKTOP_KEY_ICON: str = "Icon"
-KEY_FILE_DESKTOP_KEY_MIME_TYPE: str = "MimeType"
-KEY_FILE_DESKTOP_KEY_NAME: str = "Name"
-KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: str = "NotShowIn"
-KEY_FILE_DESKTOP_KEY_NO_DISPLAY: str = "NoDisplay"
-KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: str = "OnlyShowIn"
-KEY_FILE_DESKTOP_KEY_PATH: str = "Path"
-KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: str = "StartupNotify"
-KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: str = "StartupWMClass"
-KEY_FILE_DESKTOP_KEY_TERMINAL: str = "Terminal"
-KEY_FILE_DESKTOP_KEY_TRY_EXEC: str = "TryExec"
-KEY_FILE_DESKTOP_KEY_TYPE: str = "Type"
-KEY_FILE_DESKTOP_KEY_URL: str = "URL"
-KEY_FILE_DESKTOP_KEY_VERSION: str = "Version"
-KEY_FILE_DESKTOP_TYPE_APPLICATION: str = "Application"
-KEY_FILE_DESKTOP_TYPE_DIRECTORY: str = "Directory"
-KEY_FILE_DESKTOP_TYPE_LINK: str = "Link"
-LITTLE_ENDIAN: int = 1234
-LN10: float = 2.302585
-LN2: float = 0.693147
-LOG_2_BASE_10: float = 0.30103
-LOG_DOMAIN: int = 0
-LOG_FATAL_MASK: int = 5
-LOG_LEVEL_USER_SHIFT: int = 8
-MAJOR_VERSION: int = 2
-MAXDOUBLE: float = 1.7976931348623157e308
-MAXFLOAT: float = 3.4028234663852886e38
-MAXINT: int = 2147483647
-MAXINT16: int = 32767
-MAXINT32: int = 2147483647
-MAXINT64: int = 9223372036854775807
-MAXINT8: int = 127
-MAXLONG: int = 9223372036854775807
-MAXOFFSET: int = 9223372036854775807
-MAXSHORT: int = 32767
-MAXSIZE: int = 18446744073709551615
-MAXSSIZE: int = 9223372036854775807
-MAXUINT: int = 4294967295
-MAXUINT16: int = 65535
-MAXUINT32: int = 4294967295
-MAXUINT64: int = 18446744073709551615
-MAXUINT8: int = 255
-MAXULONG: int = 18446744073709551615
-MAXUSHORT: int = 65535
-MICRO_VERSION: int = 0
-MINDOUBLE: float = 2.2250738585072014e-308
-MINFLOAT: float = 1.1754943508222875e-38
-MININT: int = -2147483648
-MININT16: int = -32768
-MININT32: int = -2147483648
-MININT64: int = -9223372036854775808
-MININT8: int = -128
-MINLONG: int = -9223372036854775808
-MINOFFSET: int = -9223372036854775808
-MINOR_VERSION: int = 74
-MINSHORT: int = -32768
-MINSSIZE: int = -9223372036854775808
-MODULE_SUFFIX: str = "so"
-OPTION_ERROR_BAD_VALUE: int = 1
-OPTION_ERROR_FAILED: int = 2
-OPTION_ERROR_UNKNOWN_OPTION: int = 0
-OPTION_FLAG_FILENAME: int = 16
-OPTION_FLAG_HIDDEN: int = 1
-OPTION_FLAG_IN_MAIN: int = 2
-OPTION_FLAG_NOALIAS: int = 64
-OPTION_FLAG_NO_ARG: int = 8
-OPTION_FLAG_OPTIONAL_ARG: int = 32
-OPTION_FLAG_REVERSE: int = 4
-OPTION_REMAINING: str = ""
-PDP_ENDIAN: int = 3412
-PI: float = 3.141593
-PID_FORMAT: str = "i"
-PI_2: float = 1.570796
-PI_4: float = 0.785398
-POLLFD_FORMAT: str = "%d"
-PRIORITY_DEFAULT: int = 0
-PRIORITY_DEFAULT_IDLE: int = 200
-PRIORITY_HIGH: int = -100
-PRIORITY_HIGH_IDLE: int = 100
-PRIORITY_LOW: int = 300
-SEARCHPATH_SEPARATOR: int = 58
-SEARCHPATH_SEPARATOR_S: str = ":"
-SIZEOF_LONG: int = 8
-SIZEOF_SIZE_T: int = 8
-SIZEOF_SSIZE_T: int = 8
-SIZEOF_VOID_P: int = 8
-SOURCE_CONTINUE: bool = True
-SOURCE_REMOVE: bool = False
-SPAWN_CHILD_INHERITS_STDIN: int = 32
-SPAWN_DO_NOT_REAP_CHILD: int = 2
-SPAWN_FILE_AND_ARGV_ZERO: int = 64
-SPAWN_LEAVE_DESCRIPTORS_OPEN: int = 1
-SPAWN_SEARCH_PATH: int = 4
-SPAWN_STDERR_TO_DEV_NULL: int = 16
-SPAWN_STDOUT_TO_DEV_NULL: int = 8
-SQRT2: float = 1.414214
-STR_DELIMITERS: str = "_-|> <."
-SYSDEF_AF_INET: int = 2
-SYSDEF_AF_INET6: int = 10
-SYSDEF_AF_UNIX: int = 1
-SYSDEF_MSG_DONTROUTE: int = 4
-SYSDEF_MSG_OOB: int = 1
-SYSDEF_MSG_PEEK: int = 2
-TEST_OPTION_ISOLATE_DIRS: str = "isolate_dirs"
-TIME_SPAN_DAY: int = 86400000000
-TIME_SPAN_HOUR: int = 3600000000
-TIME_SPAN_MILLISECOND: int = 1000
-TIME_SPAN_MINUTE: int = 60000000
-TIME_SPAN_SECOND: int = 1000000
-UNICHAR_MAX_DECOMPOSITION_LENGTH: int = 18
-URI_RESERVED_CHARS_GENERIC_DELIMITERS: str = ":/?#[]@"
-URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: str = "!$&'()*+,;="
-USEC_PER_SEC: int = 1000000
-USER_DIRECTORY_DESKTOP: int = 0
-USER_DIRECTORY_DOCUMENTS: int = 1
-USER_DIRECTORY_DOWNLOAD: int = 2
-USER_DIRECTORY_MUSIC: int = 3
-USER_DIRECTORY_PICTURES: int = 4
-USER_DIRECTORY_PUBLIC_SHARE: int = 5
-USER_DIRECTORY_TEMPLATES: int = 6
-USER_DIRECTORY_VIDEOS: int = 7
-VA_COPY_AS_ARRAY: int = 1
-VERSION_MIN_REQUIRED: int = 2
-WIN32_MSG_HANDLE: int = 19981206
+ANALYZER_ANALYZING: Final[int] = 1
+ASCII_DTOSTR_BUF_SIZE: Final[int] = 39
+BIG_ENDIAN: Final[int] = 4321
+CSET_A_2_Z: Final[str] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
+CSET_DIGITS: Final[str] = "0123456789"
+CSET_a_2_z: Final[str] = "abcdefghijklmnopqrstuvwxyz"
+DATALIST_FLAGS_MASK: Final[int] = 3
+DATE_BAD_DAY: Final[int] = 0
+DATE_BAD_JULIAN: Final[int] = 0
+DATE_BAD_YEAR: Final[int] = 0
+DIR_SEPARATOR: Final[int] = 47
+DIR_SEPARATOR_S: Final[str] = "/"
+E: Final[float] = 2.718282
+GINT16_FORMAT: Final[str] = "hi"
+GINT16_MODIFIER: Final[str] = "h"
+GINT32_FORMAT: Final[str] = "i"
+GINT32_MODIFIER: Final[str] = ""
+GINT64_FORMAT: Final[str] = "li"
+GINT64_MODIFIER: Final[str] = "l"
+GINTPTR_FORMAT: Final[str] = "li"
+GINTPTR_MODIFIER: Final[str] = "l"
+GNUC_FUNCTION: Final[str] = ""
+GNUC_PRETTY_FUNCTION: Final[str] = ""
+GSIZE_FORMAT: Final[str] = "lu"
+GSIZE_MODIFIER: Final[str] = "l"
+GSSIZE_FORMAT: Final[str] = "li"
+GSSIZE_MODIFIER: Final[str] = "l"
+GUINT16_FORMAT: Final[str] = "hu"
+GUINT32_FORMAT: Final[str] = "u"
+GUINT64_FORMAT: Final[str] = "lu"
+GUINTPTR_FORMAT: Final[str] = "lu"
+HAVE_GINT64: Final[int] = 1
+HAVE_GNUC_VARARGS: Final[int] = 1
+HAVE_GNUC_VISIBILITY: Final[int] = 1
+HAVE_GROWING_STACK: Final[int] = 0
+HAVE_ISO_VARARGS: Final[int] = 1
+HOOK_FLAG_USER_SHIFT: Final[int] = 4
+IEEE754_DOUBLE_BIAS: Final[int] = 1023
+IEEE754_FLOAT_BIAS: Final[int] = 127
+IO_ERR: Final[int] = 8
+IO_FLAG_APPEND: Final[int] = 1
+IO_FLAG_GET_MASK: Final[int] = 31
+IO_FLAG_IS_READABLE: Final[int] = 4
+IO_FLAG_IS_SEEKABLE: Final[int] = 16
+IO_FLAG_IS_WRITEABLE: Final[int] = 8
+IO_FLAG_MASK: Final[int] = 31
+IO_FLAG_NONBLOCK: Final[int] = 2
+IO_FLAG_SET_MASK: Final[int] = 3
+IO_HUP: Final[int] = 16
+IO_IN: Final[int] = 1
+IO_NVAL: Final[int] = 32
+IO_OUT: Final[int] = 4
+IO_PRI: Final[int] = 2
+IO_STATUS_AGAIN: Final[int] = 3
+IO_STATUS_EOF: Final[int] = 2
+IO_STATUS_ERROR: Final[int] = 0
+IO_STATUS_NORMAL: Final[int] = 1
+KEY_FILE_DESKTOP_GROUP: Final[str] = "Desktop Entry"
+KEY_FILE_DESKTOP_KEY_ACTIONS: Final[str] = "Actions"
+KEY_FILE_DESKTOP_KEY_CATEGORIES: Final[str] = "Categories"
+KEY_FILE_DESKTOP_KEY_COMMENT: Final[str] = "Comment"
+KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: Final[str] = "DBusActivatable"
+KEY_FILE_DESKTOP_KEY_EXEC: Final[str] = "Exec"
+KEY_FILE_DESKTOP_KEY_GENERIC_NAME: Final[str] = "GenericName"
+KEY_FILE_DESKTOP_KEY_HIDDEN: Final[str] = "Hidden"
+KEY_FILE_DESKTOP_KEY_ICON: Final[str] = "Icon"
+KEY_FILE_DESKTOP_KEY_MIME_TYPE: Final[str] = "MimeType"
+KEY_FILE_DESKTOP_KEY_NAME: Final[str] = "Name"
+KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: Final[str] = "NotShowIn"
+KEY_FILE_DESKTOP_KEY_NO_DISPLAY: Final[str] = "NoDisplay"
+KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: Final[str] = "OnlyShowIn"
+KEY_FILE_DESKTOP_KEY_PATH: Final[str] = "Path"
+KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: Final[str] = "StartupNotify"
+KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: Final[str] = "StartupWMClass"
+KEY_FILE_DESKTOP_KEY_TERMINAL: Final[str] = "Terminal"
+KEY_FILE_DESKTOP_KEY_TRY_EXEC: Final[str] = "TryExec"
+KEY_FILE_DESKTOP_KEY_TYPE: Final[str] = "Type"
+KEY_FILE_DESKTOP_KEY_URL: Final[str] = "URL"
+KEY_FILE_DESKTOP_KEY_VERSION: Final[str] = "Version"
+KEY_FILE_DESKTOP_TYPE_APPLICATION: Final[str] = "Application"
+KEY_FILE_DESKTOP_TYPE_DIRECTORY: Final[str] = "Directory"
+KEY_FILE_DESKTOP_TYPE_LINK: Final[str] = "Link"
+LITTLE_ENDIAN: Final[int] = 1234
+LN10: Final[float] = 2.302585
+LN2: Final[float] = 0.693147
+LOG_2_BASE_10: Final[float] = 0.30103
+LOG_DOMAIN: Final[int] = 0
+LOG_FATAL_MASK: Final[int] = 5
+LOG_LEVEL_USER_SHIFT: Final[int] = 8
+MAJOR_VERSION: Final[int] = 2
+MAXDOUBLE: Final[float] = 1.7976931348623157e308
+MAXFLOAT: Final[float] = 3.4028234663852886e38
+MAXINT: Final[int] = 2147483647
+MAXINT16: Final[int] = 32767
+MAXINT32: Final[int] = 2147483647
+MAXINT64: Final[int] = 9223372036854775807
+MAXINT8: Final[int] = 127
+MAXLONG: Final[int] = 9223372036854775807
+MAXOFFSET: Final[int] = 9223372036854775807
+MAXSHORT: Final[int] = 32767
+MAXSIZE: Final[int] = 18446744073709551615
+MAXSSIZE: Final[int] = 9223372036854775807
+MAXUINT: Final[int] = 4294967295
+MAXUINT16: Final[int] = 65535
+MAXUINT32: Final[int] = 4294967295
+MAXUINT64: Final[int] = 18446744073709551615
+MAXUINT8: Final[int] = 255
+MAXULONG: Final[int] = 18446744073709551615
+MAXUSHORT: Final[int] = 65535
+MICRO_VERSION: Final[int] = 0
+MINDOUBLE: Final[float] = 2.2250738585072014e-308
+MINFLOAT: Final[float] = 1.1754943508222875e-38
+MININT: Final[int] = -2147483648
+MININT16: Final[int] = -32768
+MININT32: Final[int] = -2147483648
+MININT64: Final[int] = -9223372036854775808
+MININT8: Final[int] = -128
+MINLONG: Final[int] = -9223372036854775808
+MINOFFSET: Final[int] = -9223372036854775808
+MINOR_VERSION: Final[int] = 74
+MINSHORT: Final[int] = -32768
+MINSSIZE: Final[int] = -9223372036854775808
+MODULE_SUFFIX: Final[str] = "so"
+OPTION_ERROR_BAD_VALUE: Final[int] = 1
+OPTION_ERROR_FAILED: Final[int] = 2
+OPTION_ERROR_UNKNOWN_OPTION: Final[int] = 0
+OPTION_FLAG_FILENAME: Final[int] = 16
+OPTION_FLAG_HIDDEN: Final[int] = 1
+OPTION_FLAG_IN_MAIN: Final[int] = 2
+OPTION_FLAG_NOALIAS: Final[int] = 64
+OPTION_FLAG_NO_ARG: Final[int] = 8
+OPTION_FLAG_OPTIONAL_ARG: Final[int] = 32
+OPTION_FLAG_REVERSE: Final[int] = 4
+OPTION_REMAINING: Final[str] = ""
+PDP_ENDIAN: Final[int] = 3412
+PI: Final[float] = 3.141593
+PID_FORMAT: Final[str] = "i"
+PI_2: Final[float] = 1.570796
+PI_4: Final[float] = 0.785398
+POLLFD_FORMAT: Final[str] = "%d"
+PRIORITY_DEFAULT: Final[int] = 0
+PRIORITY_DEFAULT_IDLE: Final[int] = 200
+PRIORITY_HIGH: Final[int] = -100
+PRIORITY_HIGH_IDLE: Final[int] = 100
+PRIORITY_LOW: Final[int] = 300
+SEARCHPATH_SEPARATOR: Final[int] = 58
+SEARCHPATH_SEPARATOR_S: Final[str] = ":"
+SIZEOF_LONG: Final[int] = 8
+SIZEOF_SIZE_T: Final[int] = 8
+SIZEOF_SSIZE_T: Final[int] = 8
+SIZEOF_VOID_P: Final[int] = 8
+SOURCE_CONTINUE: Final[bool] = True
+SOURCE_REMOVE: Final[bool] = False
+SPAWN_CHILD_INHERITS_STDIN: Final[int] = 32
+SPAWN_DO_NOT_REAP_CHILD: Final[int] = 2
+SPAWN_FILE_AND_ARGV_ZERO: Final[int] = 64
+SPAWN_LEAVE_DESCRIPTORS_OPEN: Final[int] = 1
+SPAWN_SEARCH_PATH: Final[int] = 4
+SPAWN_STDERR_TO_DEV_NULL: Final[int] = 16
+SPAWN_STDOUT_TO_DEV_NULL: Final[int] = 8
+SQRT2: Final[float] = 1.414214
+STR_DELIMITERS: Final[str] = "_-|> <."
+SYSDEF_AF_INET: Final[int] = 2
+SYSDEF_AF_INET6: Final[int] = 10
+SYSDEF_AF_UNIX: Final[int] = 1
+SYSDEF_MSG_DONTROUTE: Final[int] = 4
+SYSDEF_MSG_OOB: Final[int] = 1
+SYSDEF_MSG_PEEK: Final[int] = 2
+TEST_OPTION_ISOLATE_DIRS: Final[str] = "isolate_dirs"
+TIME_SPAN_DAY: Final[int] = 86400000000
+TIME_SPAN_HOUR: Final[int] = 3600000000
+TIME_SPAN_MILLISECOND: Final[int] = 1000
+TIME_SPAN_MINUTE: Final[int] = 60000000
+TIME_SPAN_SECOND: Final[int] = 1000000
+UNICHAR_MAX_DECOMPOSITION_LENGTH: Final[int] = 18
+URI_RESERVED_CHARS_GENERIC_DELIMITERS: Final[str] = ":/?#[]@"
+URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: Final[str] = "!$&'()*+,;="
+USEC_PER_SEC: Final[int] = 1000000
+USER_DIRECTORY_DESKTOP: Final[int] = 0
+USER_DIRECTORY_DOCUMENTS: Final[int] = 1
+USER_DIRECTORY_DOWNLOAD: Final[int] = 2
+USER_DIRECTORY_MUSIC: Final[int] = 3
+USER_DIRECTORY_PICTURES: Final[int] = 4
+USER_DIRECTORY_PUBLIC_SHARE: Final[int] = 5
+USER_DIRECTORY_TEMPLATES: Final[int] = 6
+USER_DIRECTORY_VIDEOS: Final[int] = 7
+VA_COPY_AS_ARRAY: Final[int] = 1
+VERSION_MIN_REQUIRED: Final[int] = 2
+WIN32_MSG_HANDLE: Final[int] = 19981206
 _introspection_module = ...  # FIXME Constant
 _namespace: str = "GLib"
 _overrides_module = ...  # FIXME Constant
@@ -217,14 +220,14 @@ def ascii_strcasecmp(s1: str, s2: str) -> int: ...
 def ascii_strdown(str: str, len: int) -> str: ...
 def ascii_string_to_signed(
     str: str, base: int, min: int, max: int
-) -> Tuple[bool, int]: ...
+) -> tuple[bool, int]: ...
 def ascii_string_to_unsigned(
     str: str, base: int, min: int, max: int
-) -> Tuple[bool, int]: ...
+) -> tuple[bool, int]: ...
 def ascii_strncasecmp(s1: str, s2: str, n: int) -> int: ...
-def ascii_strtod(nptr: str) -> Tuple[float, str]: ...
-def ascii_strtoll(nptr: str, base: int) -> Tuple[int, str]: ...
-def ascii_strtoull(nptr: str, base: int) -> Tuple[int, str]: ...
+def ascii_strtod(nptr: str) -> tuple[float, str]: ...
+def ascii_strtoll(nptr: str, base: int) -> tuple[int, str]: ...
+def ascii_strtoull(nptr: str, base: int) -> tuple[int, str]: ...
 def ascii_strup(str: str, len: int) -> str: ...
 def ascii_tolower(c: int) -> int: ...
 def ascii_toupper(c: int) -> int: ...
@@ -271,7 +274,7 @@ def atomic_int_and(atomic: int, val: int) -> int: ...
 def atomic_int_compare_and_exchange(atomic: int, oldval: int, newval: int) -> bool: ...
 def atomic_int_compare_and_exchange_full(
     atomic: int, oldval: int, newval: int
-) -> Tuple[bool, int]: ...
+) -> tuple[bool, int]: ...
 def atomic_int_dec_and_test(atomic: int) -> bool: ...
 def atomic_int_exchange(atomic: int, newval: int) -> int: ...
 def atomic_int_exchange_and_add(atomic: int, val: int) -> int: ...
@@ -287,7 +290,7 @@ def atomic_pointer_compare_and_exchange(
 ) -> bool: ...
 def atomic_pointer_compare_and_exchange_full(
     atomic: None, oldval: None, newval: None
-) -> Tuple[bool, None]: ...
+) -> tuple[bool, None]: ...
 def atomic_pointer_exchange(atomic: None, newval: None) -> None: ...
 def atomic_pointer_get(atomic: None) -> None: ...
 def atomic_pointer_or(atomic: None, val: int) -> int: ...
@@ -307,12 +310,12 @@ def atomic_ref_count_dec(arc: int) -> bool: ...
 def atomic_ref_count_inc(arc: int) -> None: ...
 def atomic_ref_count_init(arc: int) -> None: ...
 def base64_decode(text: str) -> bytes: ...
-def base64_decode_inplace() -> Tuple[int, bytes]: ...
-def base64_encode(data: Optional[typing.Sequence[int]] = None) -> str: ...
-def base64_encode_close(break_lines: bool) -> Tuple[int, bytes, int, int]: ...
+def base64_decode_inplace() -> tuple[int, bytes]: ...
+def base64_encode(data: Optional[Sequence[int]] = None) -> str: ...
+def base64_encode_close(break_lines: bool) -> tuple[int, bytes, int, int]: ...
 def base64_encode_step(
-    in_: typing.Sequence[int], break_lines: bool
-) -> Tuple[int, bytes, int, int]: ...
+    in_: Sequence[int], break_lines: bool
+) -> tuple[int, bytes, int, int]: ...
 def basename(file_name: str) -> str: ...
 def bit_lock(address: int, lock_bit: int) -> None: ...
 def bit_nth_lsf(mask: int, nth_bit: int) -> int: ...
@@ -321,14 +324,14 @@ def bit_storage(number: int) -> int: ...
 def bit_trylock(address: int, lock_bit: int) -> bool: ...
 def bit_unlock(address: int, lock_bit: int) -> None: ...
 def bookmark_file_error_quark() -> int: ...
-def build_filenamev(args: typing.Sequence[str]) -> str: ...
-def build_pathv(separator: str, args: typing.Sequence[str]) -> str: ...
-def byte_array_free(array: typing.Sequence[int], free_segment: bool) -> int: ...
-def byte_array_free_to_bytes(array: typing.Sequence[int]) -> Bytes: ...
+def build_filenamev(args: Sequence[str]) -> str: ...
+def build_pathv(separator: str, args: Sequence[str]) -> str: ...
+def byte_array_free(array: Sequence[int], free_segment: bool) -> int: ...
+def byte_array_free_to_bytes(array: Sequence[int]) -> Bytes: ...
 def byte_array_new() -> bytes: ...
-def byte_array_new_take(data: typing.Sequence[int]) -> bytes: ...
-def byte_array_steal(array: typing.Sequence[int]) -> Tuple[int, int]: ...
-def byte_array_unref(array: typing.Sequence[int]) -> None: ...
+def byte_array_new_take(data: Sequence[int]) -> bytes: ...
+def byte_array_steal(array: Sequence[int]) -> tuple[int, int]: ...
+def byte_array_unref(array: Sequence[int]) -> None: ...
 def canonicalize_filename(filename: str, relative_to: Optional[str] = None) -> str: ...
 def chdir(path: str) -> int: ...
 def check_version(
@@ -343,7 +346,7 @@ def compute_checksum_for_bytes(
     checksum_type: ChecksumType, data: Bytes
 ) -> Optional[str]: ...
 def compute_checksum_for_data(
-    checksum_type: ChecksumType, data: typing.Sequence[int]
+    checksum_type: ChecksumType, data: Sequence[int]
 ) -> Optional[str]: ...
 def compute_checksum_for_string(
     checksum_type: ChecksumType, str: str, length: int
@@ -352,25 +355,25 @@ def compute_hmac_for_bytes(
     digest_type: ChecksumType, key: Bytes, data: Bytes
 ) -> str: ...
 def compute_hmac_for_data(
-    digest_type: ChecksumType, key: typing.Sequence[int], data: typing.Sequence[int]
+    digest_type: ChecksumType, key: Sequence[int], data: typing.Sequence[int]
 ) -> str: ...
 def compute_hmac_for_string(
-    digest_type: ChecksumType, key: typing.Sequence[int], str: str, length: int
+    digest_type: ChecksumType, key: Sequence[int], str: str, length: int
 ) -> str: ...
 def convert(
-    str: typing.Sequence[int], to_codeset: str, from_codeset: str
-) -> Tuple[bytes, int]: ...
+    str: Sequence[int], to_codeset: str, from_codeset: str
+) -> tuple[bytes, int]: ...
 def convert_error_quark() -> int: ...
 def convert_with_fallback(
-    str: typing.Sequence[int], to_codeset: str, from_codeset: str, fallback: str
-) -> Tuple[bytes, int]: ...
+    str: Sequence[int], to_codeset: str, from_codeset: str, fallback: str
+) -> tuple[bytes, int]: ...
 def datalist_foreach(
     datalist: Data, func: Callable[..., None], *user_data: Any
 ) -> None: ...
 def datalist_get_data(datalist: Data, key: str) -> None: ...
 def datalist_get_flags(datalist: Data) -> int: ...
 def datalist_id_get_data(datalist: Data, key_id: int) -> None: ...
-def datalist_id_remove_multiple(datalist: Data, keys: typing.Sequence[int]) -> None: ...
+def datalist_id_remove_multiple(datalist: Data, keys: Sequence[int]) -> None: ...
 def datalist_set_flags(datalist: Data, flags: int) -> None: ...
 def datalist_unset_flags(datalist: Data, flags: int) -> None: ...
 def dataset_destroy(dataset_location: None) -> None: ...
@@ -400,46 +403,46 @@ def double_hash(v: None) -> int: ...
 def dpgettext(domain: Optional[str], msgctxtid: str, msgidoffset: int) -> str: ...
 def dpgettext2(domain: Optional[str], context: str, msgid: str) -> str: ...
 def environ_getenv(
-    envp: Optional[typing.Sequence[str]], variable: str
+    envp: Optional[Sequence[str]], variable: str
 ) -> Optional[str]: ...
 def environ_setenv(
-    envp: Optional[typing.Sequence[str]], variable: str, value: str, overwrite: bool
+    envp: Optional[Sequence[str]], variable: str, value: str, overwrite: bool
 ) -> list[str]: ...
 def environ_unsetenv(
-    envp: Optional[typing.Sequence[str]], variable: str
+    envp: Optional[Sequence[str]], variable: str
 ) -> list[str]: ...
 def file_error_from_errno(err_no: int) -> FileError: ...
 def file_error_quark() -> int: ...
-def file_get_contents(filename: str) -> Tuple[bool, bytes]: ...
-def file_open_tmp(tmpl: Optional[str] = None) -> Tuple[int, str]: ...
+def file_get_contents(filename: str) -> tuple[bool, bytes]: ...
+def file_open_tmp(tmpl: Optional[str] = None) -> tuple[int, str]: ...
 def file_read_link(filename: str) -> str: ...
-def file_set_contents(filename: str, contents: typing.Sequence[int]) -> bool: ...
+def file_set_contents(filename: str, contents: Sequence[int]) -> bool: ...
 def file_set_contents_full(
     filename: str,
-    contents: typing.Sequence[int],
+    contents: Sequence[int],
     flags: FileSetContentsFlags,
     mode: int,
 ) -> bool: ...
 def file_test(filename: str, test: FileTest) -> bool: ...
 def filename_display_basename(filename: str) -> str: ...
 def filename_display_name(filename: str) -> str: ...
-def filename_from_uri(uri: str) -> Tuple[str, str]: ...
+def filename_from_uri(uri: str) -> tuple[str, str]: ...
 def filename_from_utf8(*args, **kwargs): ...  # FIXME Function
 def filename_to_uri(filename: str, hostname: Optional[str] = None) -> str: ...
-def filename_to_utf8(opsysstring: str, len: int) -> Tuple[str, int, int]: ...
+def filename_to_utf8(opsysstring: str, len: int) -> tuple[str, int, int]: ...
 def find_program_in_path(program: str) -> Optional[str]: ...
 def format_size(size: int) -> str: ...
 def format_size_for_display(size: int) -> str: ...
 def format_size_full(size: int, flags: FormatSizeFlags) -> str: ...
 def free(mem: None) -> None: ...
 def get_application_name() -> Optional[str]: ...
-def get_charset() -> Tuple[bool, str]: ...
+def get_charset() -> tuple[bool, str]: ...
 def get_codeset() -> str: ...
-def get_console_charset() -> Tuple[bool, str]: ...
+def get_console_charset() -> tuple[bool, str]: ...
 def get_current_dir() -> str: ...
 def get_current_time(*args, **kwargs): ...  # FIXME Function
 def get_environ() -> list[str]: ...
-def get_filename_charsets() -> Tuple[bool, list[str]]: ...
+def get_filename_charsets() -> tuple[bool, list[str]]: ...
 def get_home_dir() -> str: ...
 def get_host_name() -> str: ...
 def get_language_names() -> list[str]: ...
@@ -469,7 +472,7 @@ def hash_table_insert(hash_table: str, key: None, value: None) -> bool: ...
 def hash_table_lookup(hash_table: str, key: None) -> None: ...
 def hash_table_lookup_extended(
     hash_table: str, lookup_key: None
-) -> Tuple[bool, None, None]: ...
+) -> tuple[bool, None, None]: ...
 def hash_table_new_similar(other_hash_table: str) -> str: ...
 def hash_table_remove(hash_table: str, key: None) -> bool: ...
 def hash_table_remove_all(hash_table: str) -> None: ...
@@ -479,7 +482,7 @@ def hash_table_steal(hash_table: str, key: None) -> bool: ...
 def hash_table_steal_all(hash_table: str) -> None: ...
 def hash_table_steal_extended(
     hash_table: str, lookup_key: None
-) -> Tuple[bool, None, None]: ...
+) -> tuple[bool, None, None]: ...
 def hash_table_unref(hash_table: str) -> None: ...
 def hook_destroy(hook_list: HookList, hook_id: int) -> bool: ...
 def hook_destroy_link(hook_list: HookList, hook: Hook) -> None: ...
@@ -511,8 +514,8 @@ def io_channel_error_quark() -> int: ...
 def io_create_watch(channel: IOChannel, condition: IOCondition) -> Source: ...
 def key_file_error_quark() -> int: ...
 def listenv() -> list[str]: ...
-def locale_from_utf8(utf8string: str, len: int) -> Tuple[bytes, int]: ...
-def locale_to_utf8(opsysstring: typing.Sequence[int]) -> Tuple[str, int, int]: ...
+def locale_from_utf8(utf8string: str, len: int) -> tuple[bytes, int]: ...
+def locale_to_utf8(opsysstring: Sequence[int]) -> tuple[str, int, int]: ...
 def log_default_handler(
     log_domain: Optional[str],
     log_level: LogLevelFlags,
@@ -534,27 +537,27 @@ def log_set_writer_func(
     func: Optional[Callable[..., LogWriterOutput]] = None, *user_data: Any
 ) -> None: ...
 def log_structured_array(
-    log_level: LogLevelFlags, fields: typing.Sequence[LogField]
+    log_level: LogLevelFlags, fields: Sequence[LogField]
 ) -> None: ...
 def log_variant(
     log_domain: Optional[str], log_level: LogLevelFlags, fields: Variant
 ) -> None: ...
 def log_writer_default(
-    log_level: LogLevelFlags, fields: typing.Sequence[LogField], user_data: None
+    log_level: LogLevelFlags, fields: Sequence[LogField], user_data: None
 ) -> LogWriterOutput: ...
 def log_writer_default_set_use_stderr(use_stderr: bool) -> None: ...
 def log_writer_default_would_drop(
     log_level: LogLevelFlags, log_domain: Optional[str] = None
 ) -> bool: ...
 def log_writer_format_fields(
-    log_level: LogLevelFlags, fields: typing.Sequence[LogField], use_color: bool
+    log_level: LogLevelFlags, fields: Sequence[LogField], use_color: bool
 ) -> str: ...
 def log_writer_is_journald(output_fd: int) -> bool: ...
 def log_writer_journald(
-    log_level: LogLevelFlags, fields: typing.Sequence[LogField], user_data: None
+    log_level: LogLevelFlags, fields: Sequence[LogField], user_data: None
 ) -> LogWriterOutput: ...
 def log_writer_standard_streams(
-    log_level: LogLevelFlags, fields: typing.Sequence[LogField], user_data: None
+    log_level: LogLevelFlags, fields: Sequence[LogField], user_data: None
 ) -> LogWriterOutput: ...
 def log_writer_supports_color(output_fd: int) -> bool: ...
 def main_context_default() -> MainContext: ...
@@ -584,23 +587,23 @@ def once_init_enter(location: None) -> bool: ...
 def once_init_leave(location: None, result: int) -> None: ...
 def option_error_quark() -> int: ...
 def parse_debug_string(
-    string: Optional[str], keys: typing.Sequence[DebugKey]
+    string: Optional[str], keys: Sequence[DebugKey]
 ) -> int: ...
 def path_get_basename(file_name: str) -> str: ...
 def path_get_dirname(file_name: str) -> str: ...
 def path_is_absolute(file_name: str) -> bool: ...
-def path_skip_root(file_name: str) -> Optional[str]: ...
+def path_skip_root(file_name: str) -> str | None: ...
 def pattern_match_simple(pattern: str, string: str) -> bool: ...
 def pointer_bit_lock(address: None, lock_bit: int) -> None: ...
 def pointer_bit_trylock(address: None, lock_bit: int) -> bool: ...
 def pointer_bit_unlock(address: None, lock_bit: int) -> None: ...
 def poll(fds: PollFD, nfds: int, timeout: int) -> int: ...
-def prefix_error_literal(err: Optional[Error], prefix: str) -> None: ...
+def prefix_error_literal(err: Error | None, prefix: str) -> None: ...
 def propagate_error(src: Error) -> Error: ...
-def quark_from_static_string(string: Optional[str] = None) -> int: ...
-def quark_from_string(string: Optional[str] = None) -> int: ...
+def quark_from_static_string(string: str | None = None) -> int: ...
+def quark_from_string(string: str | None = None) -> int: ...
 def quark_to_string(quark: int) -> str: ...
-def quark_try_string(string: Optional[str] = None) -> int: ...
+def quark_try_string(string: str | None = None) -> int: ...
 def random_double() -> float: ...
 def random_double_range(begin: float, end: float) -> float: ...
 def random_int() -> int: ...
@@ -627,10 +630,10 @@ def ref_string_new(str: str) -> str: ...
 def ref_string_new_intern(str: str) -> str: ...
 def ref_string_new_len(str: str, len: int) -> str: ...
 def ref_string_release(str: str) -> None: ...
-def regex_check_replacement(replacement: str) -> Tuple[bool, bool]: ...
+def regex_check_replacement(replacement: str) -> tuple[bool, bool]: ...
 def regex_error_quark() -> int: ...
 def regex_escape_nul(string: str, length: int) -> str: ...
-def regex_escape_string(string: typing.Sequence[str]) -> str: ...
+def regex_escape_string(string: Sequence[str]) -> str: ...
 def regex_match_simple(
     pattern: str,
     string: str,
@@ -663,7 +666,7 @@ def set_error_literal(domain: int, code: int, message: str) -> Error: ...
 def set_prgname(prgname: str) -> None: ...
 def setenv(variable: str, value: str, overwrite: bool) -> bool: ...
 def shell_error_quark() -> int: ...
-def shell_parse_argv(command_line: str) -> Tuple[bool, int, list[str]]: ...
+def shell_parse_argv(command_line: str) -> tuple[bool, int, list[str]]: ...
 def shell_quote(unquoted_string: str) -> str: ...
 def shell_unquote(quoted_string: str) -> str: ...
 def slice_alloc(block_size: int) -> None: ...
@@ -684,51 +687,51 @@ def spaced_primes_closest(num: int) -> int: ...
 def spawn_async(*args, **kwargs): ...  # FIXME Function
 def spawn_async_with_fds(
     working_directory: Optional[str],
-    argv: typing.Sequence[str],
-    envp: Optional[typing.Sequence[str]],
+    argv: Sequence[str],
+    envp: Optional[Sequence[str]],
     flags: SpawnFlags,
     child_setup: Optional[Callable[..., None]],
     stdin_fd: int,
     stdout_fd: int,
     stderr_fd: int,
     *user_data: Any,
-) -> Tuple[bool, int]: ...
+) -> tuple[bool, int]: ...
 def spawn_async_with_pipes(
     working_directory: Optional[str],
-    argv: typing.Sequence[str],
-    envp: Optional[typing.Sequence[str]],
+    argv: Sequence[str],
+    envp: Optional[Sequence[str]],
     flags: SpawnFlags,
     child_setup: Optional[Callable[..., None]] = None,
     *user_data: Any,
-) -> Tuple[bool, int, int, int, int]: ...
+) -> tuple[bool, int, int, int, int]: ...
 def spawn_async_with_pipes_and_fds(
     working_directory: Optional[str],
-    argv: typing.Sequence[str],
-    envp: Optional[typing.Sequence[str]],
+    argv: Sequence[str],
+    envp: Optional[Sequence[str]],
     flags: SpawnFlags,
     child_setup: Optional[Callable[..., None]],
     stdin_fd: int,
     stdout_fd: int,
     stderr_fd: int,
-    source_fds: Optional[typing.Sequence[int]] = None,
-    target_fds: Optional[typing.Sequence[int]] = None,
+    source_fds: Optional[Sequence[int]] = None,
+    target_fds: Optional[Sequence[int]] = None,
     *user_data: Any,
-) -> Tuple[bool, int, int, int, int]: ...
+) -> tuple[bool, int, int, int, int]: ...
 def spawn_check_exit_status(wait_status: int) -> bool: ...
 def spawn_check_wait_status(wait_status: int) -> bool: ...
 def spawn_close_pid(pid: int) -> None: ...
 def spawn_command_line_async(command_line: str) -> bool: ...
-def spawn_command_line_sync(command_line: str) -> Tuple[bool, bytes, bytes, int]: ...
+def spawn_command_line_sync(command_line: str) -> tuple[bool, bytes, bytes, int]: ...
 def spawn_error_quark() -> int: ...
 def spawn_exit_error_quark() -> int: ...
 def spawn_sync(
     working_directory: Optional[str],
-    argv: typing.Sequence[str],
-    envp: Optional[typing.Sequence[str]],
+    argv: Sequence[str],
+    envp: Optional[Sequence[str]],
     flags: SpawnFlags,
     child_setup: Optional[Callable[..., None]] = None,
     *user_data: Any,
-) -> Tuple[bool, bytes, bytes, int]: ...
+) -> tuple[bool, bytes, bytes, int]: ...
 def stpcpy(dest: str, src: str) -> str: ...
 def str_equal(v1: None, v2: None) -> bool: ...
 def str_has_prefix(str: str, prefix: str) -> bool: ...
@@ -741,7 +744,7 @@ def str_match_string(
 def str_to_ascii(str: str, from_locale: Optional[str] = None) -> str: ...
 def str_tokenize_and_fold(
     string: str, translit_locale: Optional[str] = None
-) -> Tuple[list[str], list[str]]: ...
+) -> tuple[list[str], list[str]]: ...
 def strcanon(string: str, valid_chars: str, substitutor: int) -> str: ...
 def strcasecmp(s1: str, s2: str) -> int: ...
 def strchomp(string: str) -> str: ...
@@ -766,7 +769,7 @@ def strrstr(haystack: str, needle: str) -> str: ...
 def strrstr_len(haystack: str, haystack_len: int, needle: str) -> str: ...
 def strsignal(signum: int) -> str: ...
 def strstr_len(haystack: str, haystack_len: int, needle: str) -> str: ...
-def strtod(nptr: str) -> Tuple[float, str]: ...
+def strtod(nptr: str) -> tuple[float, str]: ...
 def strup(string: str) -> str: ...
 def strv_contains(strv: str, str: str) -> bool: ...
 def strv_equal(strv1: str, strv2: str) -> bool: ...
@@ -833,7 +836,7 @@ def thread_pool_stop_unused_threads() -> None: ...
 def thread_self() -> Thread: ...
 def thread_yield() -> None: ...
 def threads_init(*args, **kwargs): ...  # FIXME Function
-def time_val_from_iso8601(iso_date: str) -> Tuple[bool, TimeVal]: ...
+def time_val_from_iso8601(iso_date: str) -> tuple[bool, TimeVal]: ...
 
 # override
 def timeout_add(interval: int, function: Callable[..., Any], *args: Any) -> int: ...
@@ -854,16 +857,16 @@ def try_malloc0_n(n_blocks: int, n_block_bytes: int) -> None: ...
 def try_malloc_n(n_blocks: int, n_block_bytes: int) -> None: ...
 def try_realloc(mem: None, n_bytes: int) -> None: ...
 def try_realloc_n(mem: None, n_blocks: int, n_block_bytes: int) -> None: ...
-def ucs4_to_utf16(str: str, len: int) -> Tuple[int, int, int]: ...
-def ucs4_to_utf8(str: str, len: int) -> Tuple[str, int, int]: ...
+def ucs4_to_utf16(str: str, len: int) -> tuple[int, int, int]: ...
+def ucs4_to_utf8(str: str, len: int) -> tuple[str, int, int]: ...
 def unichar_break_type(c: str) -> UnicodeBreakType: ...
 def unichar_combining_class(uc: str) -> int: ...
-def unichar_compose(a: str, b: str) -> Tuple[bool, str]: ...
-def unichar_decompose(ch: str) -> Tuple[bool, str, str]: ...
+def unichar_compose(a: str, b: str) -> tuple[bool, str]: ...
+def unichar_decompose(ch: str) -> tuple[bool, str, str]: ...
 def unichar_digit_value(c: str) -> int: ...
 def unichar_fully_decompose(
     ch: str, compat: bool, result_len: int
-) -> Tuple[int, str]: ...
+) -> tuple[int, str]: ...
 def unichar_get_mirror_char(ch: str, mirrored_ch: str) -> bool: ...
 def unichar_get_script(ch: str) -> UnicodeScript: ...
 def unichar_isalnum(c: str) -> bool: ...
@@ -883,7 +886,7 @@ def unichar_iswide(c: str) -> bool: ...
 def unichar_iswide_cjk(c: str) -> bool: ...
 def unichar_isxdigit(c: str) -> bool: ...
 def unichar_iszerowidth(c: str) -> bool: ...
-def unichar_to_utf8(c: str) -> Tuple[int, str]: ...
+def unichar_to_utf8(c: str) -> tuple[int, str]: ...
 def unichar_tolower(c: str) -> str: ...
 def unichar_totitle(c: str) -> str: ...
 def unichar_toupper(c: str) -> str: ...
@@ -904,7 +907,7 @@ def unix_fd_add_full(
 ) -> int: ...
 def unix_fd_source_new(fd: int, condition: IOCondition) -> Source: ...
 def unix_get_passwd_entry(user_name: str) -> None: ...
-def unix_open_pipe(fds: typing.Sequence[int], flags: int) -> bool: ...
+def unix_open_pipe(fds: Sequence[int], flags: int) -> bool: ...
 def unix_set_fd_nonblocking(fd: int, nonblock: bool) -> bool: ...
 def unix_signal_add(
     priority: int, signum: int, handler: Callable[..., bool], *user_data: Any
@@ -939,7 +942,7 @@ def uri_build_with_user(
 ) -> Uri: ...
 def uri_error_quark() -> int: ...
 def uri_escape_bytes(
-    unescaped: typing.Sequence[int], reserved_chars_allowed: Optional[str] = None
+    unescaped: Sequence[int], reserved_chars_allowed: Optional[str] = None
 ) -> str: ...
 def uri_escape_string(
     unescaped: str, reserved_chars_allowed: Optional[str], allow_utf8: bool
@@ -979,13 +982,13 @@ def uri_resolve_relative(
 ) -> str: ...
 def uri_split(
     uri_ref: str, flags: UriFlags
-) -> Tuple[bool, str, str, str, int, str, str, str]: ...
+) -> tuple[bool, str, str, str, int, str, str, str]: ...
 def uri_split_network(
     uri_string: str, flags: UriFlags
-) -> Tuple[bool, str, str, int]: ...
+) -> tuple[bool, str, str, int]: ...
 def uri_split_with_user(
     uri_ref: str, flags: UriFlags
-) -> Tuple[bool, str, str, str, str, str, int, str, str, str]: ...
+) -> tuple[bool, str, str, str, str, str, int, str, str, str]: ...
 def uri_unescape_bytes(
     escaped_string: str, length: int, illegal_characters: Optional[str] = None
 ) -> Bytes: ...
@@ -998,8 +1001,8 @@ def uri_unescape_string(
     escaped_string: str, illegal_characters: Optional[str] = None
 ) -> Optional[str]: ...
 def usleep(microseconds: int) -> None: ...
-def utf16_to_ucs4(str: int, len: int) -> Tuple[str, int, int]: ...
-def utf16_to_utf8(str: int, len: int) -> Tuple[str, int, int]: ...
+def utf16_to_ucs4(str: int, len: int) -> tuple[str, int, int]: ...
+def utf16_to_utf8(str: int, len: int) -> tuple[str, int, int]: ...
 def utf8_casefold(str: str, len: int) -> str: ...
 def utf8_collate(str1: str, str2: str) -> int: ...
 def utf8_collate_key(str: str, len: int) -> str: ...
@@ -1021,21 +1024,21 @@ def utf8_strrchr(p: str, len: int, c: str) -> Optional[str]: ...
 def utf8_strreverse(str: str, len: int) -> str: ...
 def utf8_strup(str: str, len: int) -> str: ...
 def utf8_substring(str: str, start_pos: int, end_pos: int) -> str: ...
-def utf8_to_ucs4(str: str, len: int) -> Tuple[str, int, int]: ...
-def utf8_to_ucs4_fast(str: str, len: int) -> Tuple[str, int]: ...
-def utf8_to_utf16(str: str, len: int) -> Tuple[int, int, int]: ...
-def utf8_validate(str: typing.Sequence[int]) -> Tuple[bool, str]: ...
-def utf8_validate_len(str: typing.Sequence[int]) -> Tuple[bool, str]: ...
+def utf8_to_ucs4(str: str, len: int) -> tuple[str, int, int]: ...
+def utf8_to_ucs4_fast(str: str, len: int) -> tuple[str, int]: ...
+def utf8_to_utf16(str: str, len: int) -> tuple[int, int, int]: ...
+def utf8_validate(str: Sequence[int]) -> tuple[bool, str]: ...
+def utf8_validate_len(str: Sequence[int]) -> tuple[bool, str]: ...
 def uuid_string_is_valid(str: str) -> bool: ...
 def uuid_string_random() -> str: ...
 def variant_get_gtype() -> Type: ...
 def variant_is_object_path(string: str) -> bool: ...
 def variant_is_signature(string: str) -> bool: ...
 def variant_parse(
-    type: Optional[VariantType],
+    type: VariantType | None,
     text: str,
-    limit: Optional[str] = None,
-    endptr: Optional[str] = None,
+    limit: str | None = None,
+    endptr: str | None = None,
 ) -> Variant: ...
 def variant_parse_error_print_context(error: Error, source_str: str) -> str: ...
 def variant_parse_error_quark() -> int: ...
@@ -1044,8 +1047,8 @@ def variant_type_checked_(arg0: str) -> VariantType: ...
 def variant_type_string_get_depth_(type_string: str) -> int: ...
 def variant_type_string_is_valid(type_string: str) -> bool: ...
 def variant_type_string_scan(
-    string: str, limit: Optional[str] = None
-) -> Tuple[bool, str]: ...
+    string: str, limit: str | None = None
+) -> tuple[bool, str]: ...
 
 class Array(GObject.GBoxed):
     data: str = ...
@@ -1084,14 +1087,14 @@ class BookmarkFile(GObject.GPointer):
     def free(self) -> None: ...
     def get_added(self, uri: str) -> int: ...
     def get_added_date_time(self, uri: str) -> DateTime: ...
-    def get_app_info(self, uri: str, name: str) -> Tuple[bool, str, int, int]: ...
+    def get_app_info(self, uri: str, name: str) -> tuple[bool, str, int, int]: ...
     def get_application_info(
         self, uri: str, name: str
-    ) -> Tuple[bool, str, int, DateTime]: ...
+    ) -> tuple[bool, str, int, DateTime]: ...
     def get_applications(self, uri: str) -> list[str]: ...
     def get_description(self, uri: str) -> str: ...
     def get_groups(self, uri: str) -> list[str]: ...
-    def get_icon(self, uri: str) -> Tuple[bool, str, str]: ...
+    def get_icon(self, uri: str) -> tuple[bool, str, str]: ...
     def get_is_private(self, uri: str) -> bool: ...
     def get_mime_type(self, uri: str) -> str: ...
     def get_modified(self, uri: str) -> int: ...
@@ -1104,10 +1107,10 @@ class BookmarkFile(GObject.GPointer):
     def has_application(self, uri: str, name: str) -> bool: ...
     def has_group(self, uri: str, group: str) -> bool: ...
     def has_item(self, uri: str) -> bool: ...
-    def load_from_data(self, data: typing.Sequence[int]) -> bool: ...
-    def load_from_data_dirs(self, file: str) -> Tuple[bool, str]: ...
+    def load_from_data(self, data: Sequence[int]) -> bool: ...
+    def load_from_data_dirs(self, file: str) -> tuple[bool, str]: ...
     def load_from_file(self, filename: str) -> bool: ...
-    def move_item(self, old_uri: str, new_uri: Optional[str] = None) -> bool: ...
+    def move_item(self, old_uri: str, new_uri: str | None = None) -> bool: ...
     def remove_application(self, uri: str, name: str) -> bool: ...
     def remove_group(self, uri: str, group: str) -> bool: ...
     def remove_item(self, uri: str) -> bool: ...
@@ -1126,7 +1129,7 @@ class BookmarkFile(GObject.GPointer):
     ) -> bool: ...
     def set_description(self, uri: Optional[str], description: str) -> None: ...
     def set_groups(
-        self, uri: str, groups: Optional[typing.Sequence[str]] = None
+        self, uri: str, groups: Optional[Sequence[str]] = None
     ) -> None: ...
     def set_icon(self, uri: str, href: Optional[str], mime_type: str) -> None: ...
     def set_is_private(self, uri: str, is_private: bool) -> None: ...
@@ -1143,17 +1146,17 @@ class ByteArray(GObject.GBoxed):
     data: int = ...
     len: int = ...
     @staticmethod
-    def free(array: typing.Sequence[int], free_segment: bool) -> int: ...
+    def free(array: Sequence[int], free_segment: bool) -> int: ...
     @staticmethod
-    def free_to_bytes(array: typing.Sequence[int]) -> Bytes: ...
+    def free_to_bytes(array: Sequence[int]) -> Bytes: ...
     @staticmethod
     def new() -> bytes: ...
     @staticmethod
-    def new_take(data: typing.Sequence[int]) -> bytes: ...
+    def new_take(data: Sequence[int]) -> bytes: ...
     @staticmethod
-    def steal(array: typing.Sequence[int]) -> Tuple[int, int]: ...
+    def steal(array: Sequence[int]) -> tuple[int, int]: ...
     @staticmethod
-    def unref(array: typing.Sequence[int]) -> None: ...
+    def unref(array: Sequence[int]) -> None: ...
 
 class Bytes(GObject.GBoxed):
     def compare(self, bytes2: Bytes) -> int: ...
@@ -1163,10 +1166,10 @@ class Bytes(GObject.GBoxed):
     def get_size(self) -> int: ...
     def hash(self) -> int: ...
     @classmethod
-    def new(cls, data: Optional[typing.Sequence[int]] = None) -> Bytes: ...
+    def new(cls, data: Optional[Sequence[int]] = None) -> Bytes: ...
     def new_from_bytes(self, offset: int, length: int) -> Bytes: ...
     @classmethod
-    def new_take(cls, data: Optional[typing.Sequence[int]] = None) -> Bytes: ...
+    def new_take(cls, data: Optional[Sequence[int]] = None) -> Bytes: ...
     def ref(self) -> Bytes: ...
     def unref(self) -> None: ...
     def unref_to_array(self) -> bytes: ...
@@ -1181,7 +1184,7 @@ class Checksum(GObject.GBoxed):
     def reset(self) -> None: ...
     @staticmethod
     def type_get_length(checksum_type: ChecksumType) -> int: ...
-    def update(self, data: typing.Sequence[int]) -> None: ...
+    def update(self, data: Sequence[int]) -> None: ...
 
 class Cond(GObject.GPointer):
     p: None = ...
@@ -1304,7 +1307,7 @@ class DateTime(GObject.GBoxed):
     def get_week_numbering_year(self) -> int: ...
     def get_week_of_year(self) -> int: ...
     def get_year(self) -> int: ...
-    def get_ymd(self) -> Tuple[int, int, int]: ...
+    def get_ymd(self) -> tuple[int, int, int]: ...
     def hash(self) -> int: ...
     def is_daylight_savings(self) -> bool: ...
     @classmethod
@@ -1425,7 +1428,7 @@ class HashTable(GObject.GBoxed):
     @staticmethod
     def lookup_extended(
         hash_table: str, lookup_key: None
-    ) -> Tuple[bool, None, None]: ...
+    ) -> tuple[bool, None, None]: ...
     @staticmethod
     def new_similar(other_hash_table: str) -> str: ...
     @staticmethod
@@ -1443,7 +1446,7 @@ class HashTable(GObject.GBoxed):
     @staticmethod
     def steal_extended(
         hash_table: str, lookup_key: None
-    ) -> Tuple[bool, None, None]: ...
+    ) -> tuple[bool, None, None]: ...
     @staticmethod
     def unref(hash_table: str) -> None: ...
 
@@ -1455,16 +1458,16 @@ class HashTableIter(GObject.GPointer):
     dummy5: bool = ...
     dummy6: None = ...
     def init(self, hash_table: str) -> None: ...
-    def next(self) -> Tuple[bool, None, None]: ...
+    def next(self) -> tuple[bool, None, None]: ...
     def remove(self) -> None: ...
     def replace(self, value: None) -> None: ...
     def steal(self) -> None: ...
 
 class Hmac(GObject.GPointer):
-    def get_digest(self, buffer: typing.Sequence[int]) -> None: ...
+    def get_digest(self, buffer: Sequence[int]) -> None: ...
     def get_string(self) -> str: ...
     def unref(self) -> None: ...
-    def update(self, data: typing.Sequence[int]) -> None: ...
+    def update(self, data: Sequence[int]) -> None: ...
 
 class Hook(GObject.GPointer):
     data: None = ...
@@ -1546,13 +1549,13 @@ class IOChannel(GObject.GBoxed):
     def new_file(cls, filename: str, mode: str) -> IOChannel: ...
     def next(self, *args, **kwargs): ...  # FIXME Method
     def read(self, *args, **kwargs): ...  # FIXME Method
-    def read_chars(self) -> Tuple[IOStatus, bytes, int]: ...
-    def read_line(self) -> Tuple[IOStatus, str, int, int]: ...
+    def read_chars(self) -> tuple[IOStatus, bytes, int]: ...
+    def read_line(self) -> tuple[IOStatus, str, int, int]: ...
     def read_line_string(
         self, buffer: String, terminator_pos: Optional[int] = None
     ) -> IOStatus: ...
-    def read_to_end(self) -> Tuple[IOStatus, bytes]: ...
-    def read_unichar(self) -> Tuple[IOStatus, str]: ...
+    def read_to_end(self) -> tuple[IOStatus, bytes]: ...
+    def read_unichar(self) -> tuple[IOStatus, str]: ...
     def readline(self, *args, **kwargs): ...  # FIXME Method
     def readlines(self, *args, **kwargs): ...  # FIXME Method
     def ref(self) -> IOChannel: ...
@@ -1571,8 +1574,8 @@ class IOChannel(GObject.GBoxed):
     def unref(self) -> None: ...
     def write(self, *args, **kwargs): ...  # FIXME Method
     def write_chars(
-        self, buf: typing.Sequence[int], count: int
-    ) -> Tuple[IOStatus, int]: ...
+        self, buf: Sequence[int], count: int
+    ) -> tuple[IOStatus, int]: ...
     def write_unichar(self, thechar: str) -> IOStatus: ...
     def writelines(self, *args, **kwargs): ...  # FIXME Method
 
@@ -1654,11 +1657,11 @@ class KeyFile(GObject.GBoxed):
     ) -> str: ...
     def get_double(self, group_name: str, key: str) -> float: ...
     def get_double_list(self, group_name: str, key: str) -> list[float]: ...
-    def get_groups(self) -> Tuple[list[str], int]: ...
+    def get_groups(self) -> tuple[list[str], int]: ...
     def get_int64(self, group_name: str, key: str) -> int: ...
     def get_integer(self, group_name: str, key: str) -> int: ...
     def get_integer_list(self, group_name: str, key: str) -> list[int]: ...
-    def get_keys(self, group_name: str) -> Tuple[list[str], int]: ...
+    def get_keys(self, group_name: str) -> tuple[list[str], int]: ...
     def get_locale_for_key(
         self, group_name: str, key: str, locale: Optional[str] = None
     ) -> Optional[str]: ...
@@ -1678,10 +1681,10 @@ class KeyFile(GObject.GBoxed):
     def load_from_data(self, data: str, length: int, flags: KeyFileFlags) -> bool: ...
     def load_from_data_dirs(
         self, file: str, flags: KeyFileFlags
-    ) -> Tuple[bool, str]: ...
+    ) -> tuple[bool, str]: ...
     def load_from_dirs(
-        self, file: str, search_dirs: typing.Sequence[str], flags: KeyFileFlags
-    ) -> Tuple[bool, str]: ...
+        self, file: str, search_dirs: Sequence[str], flags: KeyFileFlags
+    ) -> tuple[bool, str]: ...
     def load_from_file(self, file: str, flags: KeyFileFlags) -> bool: ...
     @classmethod
     def new(cls) -> KeyFile: ...
@@ -1693,34 +1696,34 @@ class KeyFile(GObject.GBoxed):
     def save_to_file(self, filename: str) -> bool: ...
     def set_boolean(self, group_name: str, key: str, value: bool) -> None: ...
     def set_boolean_list(
-        self, group_name: str, key: str, list: typing.Sequence[bool]
+        self, group_name: str, key: str, list: Sequence[bool]
     ) -> None: ...
     def set_comment(
         self, group_name: Optional[str], key: Optional[str], comment: str
     ) -> bool: ...
     def set_double(self, group_name: str, key: str, value: float) -> None: ...
     def set_double_list(
-        self, group_name: str, key: str, list: typing.Sequence[float]
+        self, group_name: str, key: str, list: Sequence[float]
     ) -> None: ...
     def set_int64(self, group_name: str, key: str, value: int) -> None: ...
     def set_integer(self, group_name: str, key: str, value: int) -> None: ...
     def set_integer_list(
-        self, group_name: str, key: str, list: typing.Sequence[int]
+        self, group_name: str, key: str, list: Sequence[int]
     ) -> None: ...
     def set_list_separator(self, separator: int) -> None: ...
     def set_locale_string(
         self, group_name: str, key: str, locale: str, string: str
     ) -> None: ...
     def set_locale_string_list(
-        self, group_name: str, key: str, locale: str, list: typing.Sequence[str]
+        self, group_name: str, key: str, locale: str, list: Sequence[str]
     ) -> None: ...
     def set_string(self, group_name: str, key: str, string: str) -> None: ...
     def set_string_list(
-        self, group_name: str, key: str, list: typing.Sequence[str]
+        self, group_name: str, key: str, list: Sequence[str]
     ) -> None: ...
     def set_uint64(self, group_name: str, key: str, value: int) -> None: ...
     def set_value(self, group_name: str, key: str, value: str) -> None: ...
-    def to_data(self) -> Tuple[str, int]: ...
+    def to_data(self) -> tuple[str, int]: ...
     def unref(self) -> None: ...
 
 class List(GObject.GPointer):
@@ -1736,7 +1739,7 @@ class LogField(GObject.GPointer):
 class MainContext(GObject.GBoxed):
     def acquire(self) -> bool: ...
     def add_poll(self, fd: PollFD, priority: int) -> None: ...
-    def check(self, max_priority: int, fds: typing.Sequence[PollFD]) -> bool: ...
+    def check(self, max_priority: int, fds: Sequence[PollFD]) -> bool: ...
     @staticmethod
     def default() -> MainContext: ...
     def dispatch(self) -> None: ...
@@ -1759,9 +1762,9 @@ class MainContext(GObject.GBoxed):
     def new_with_flags(cls, flags: MainContextFlags) -> MainContext: ...
     def pending(self) -> bool: ...
     def pop_thread_default(self) -> None: ...
-    def prepare(self) -> Tuple[bool, int]: ...
+    def prepare(self) -> tuple[bool, int]: ...
     def push_thread_default(self) -> None: ...
-    def query(self, max_priority: int) -> Tuple[int, int, list[PollFD]]: ...
+    def query(self, max_priority: int) -> tuple[int, int, list[PollFD]]: ...
     def ref(self) -> MainContext: ...
     @staticmethod
     def ref_thread_default() -> MainContext: ...
@@ -1797,7 +1800,7 @@ class MarkupParseContext(GObject.GBoxed):
     def end_parse(self) -> bool: ...
     def free(self) -> None: ...
     def get_element(self) -> str: ...
-    def get_position(self) -> Tuple[int, int]: ...
+    def get_position(self) -> tuple[int, int]: ...
     def get_user_data(self) -> None: ...
     @classmethod
     def new(
@@ -1825,8 +1828,8 @@ class MatchInfo(GObject.GBoxed):
     def fetch(self, match_num: int) -> Optional[str]: ...
     def fetch_all(self) -> list[str]: ...
     def fetch_named(self, name: str) -> Optional[str]: ...
-    def fetch_named_pos(self, name: str) -> Tuple[bool, int, int]: ...
-    def fetch_pos(self, match_num: int) -> Tuple[bool, int, int]: ...
+    def fetch_named_pos(self, name: str) -> tuple[bool, int, int]: ...
+    def fetch_pos(self, match_num: int) -> tuple[bool, int, int]: ...
     def free(self) -> None: ...
     def get_match_count(self) -> int: ...
     def get_regex(self) -> Regex: ...
@@ -2004,13 +2007,13 @@ class RecMutex(GObject.GPointer):
 
 class Regex(GObject.GBoxed):
     @staticmethod
-    def check_replacement(replacement: str) -> Tuple[bool, bool]: ...
+    def check_replacement(replacement: str) -> tuple[bool, bool]: ...
     @staticmethod
     def error_quark() -> int: ...
     @staticmethod
     def escape_nul(string: str, length: int) -> str: ...
     @staticmethod
-    def escape_string(string: typing.Sequence[str]) -> str: ...
+    def escape_string(string: Sequence[str]) -> str: ...
     def get_capture_count(self) -> int: ...
     def get_compile_flags(self) -> RegexCompileFlags: ...
     def get_has_cr_or_lf(self) -> bool: ...
@@ -2021,22 +2024,22 @@ class Regex(GObject.GBoxed):
     def get_string_number(self, name: str) -> int: ...
     def match(
         self, string: str, match_options: RegexMatchFlags
-    ) -> Tuple[bool, MatchInfo]: ...
+    ) -> tuple[bool, MatchInfo]: ...
     def match_all(
         self, string: str, match_options: RegexMatchFlags
-    ) -> Tuple[bool, MatchInfo]: ...
+    ) -> tuple[bool, MatchInfo]: ...
     def match_all_full(
         self,
-        string: typing.Sequence[str],
+        string: Sequence[str],
         start_position: int,
         match_options: RegexMatchFlags,
-    ) -> Tuple[bool, MatchInfo]: ...
+    ) -> tuple[bool, MatchInfo]: ...
     def match_full(
         self,
-        string: typing.Sequence[str],
+        string: Sequence[str],
         start_position: int,
         match_options: RegexMatchFlags,
-    ) -> Tuple[bool, MatchInfo]: ...
+    ) -> tuple[bool, MatchInfo]: ...
     @staticmethod
     def match_simple(
         pattern: str,
@@ -2054,14 +2057,14 @@ class Regex(GObject.GBoxed):
     def ref(self) -> Regex: ...
     def replace(
         self,
-        string: typing.Sequence[str],
+        string: Sequence[str],
         start_position: int,
         replacement: str,
         match_options: RegexMatchFlags,
     ) -> str: ...
     def replace_literal(
         self,
-        string: typing.Sequence[str],
+        string: Sequence[str],
         start_position: int,
         replacement: str,
         match_options: RegexMatchFlags,
@@ -2069,7 +2072,7 @@ class Regex(GObject.GBoxed):
     def split(self, string: str, match_options: RegexMatchFlags) -> list[str]: ...
     def split_full(
         self,
-        string: typing.Sequence[str],
+        string: Sequence[str],
         start_position: int,
         match_options: RegexMatchFlags,
         max_tokens: int,
@@ -2327,7 +2330,7 @@ class StringChunk(GObject.GPointer):
 
 class StrvBuilder(GObject.GPointer):
     def add(self, value: str) -> None: ...
-    def addv(self, value: typing.Sequence[str]) -> None: ...
+    def addv(self, value: Sequence[str]) -> None: ...
     def end(self) -> list[str]: ...
     def unref(self) -> None: ...
 
@@ -2411,7 +2414,7 @@ class TimeVal(GObject.GPointer):
     tv_usec: int = ...
     def add(self, microseconds: int) -> None: ...
     @staticmethod
-    def from_iso8601(iso_date: str) -> Tuple[bool, TimeVal]: ...
+    def from_iso8601(iso_date: str) -> tuple[bool, TimeVal]: ...
     def to_iso8601(self) -> Optional[str]: ...
 
 class TimeZone(GObject.GBoxed):
@@ -2532,7 +2535,7 @@ class Tree(GObject.GBoxed):
     def insert(self, key: None, value: None) -> None: ...
     def insert_node(self, key: None, value: None) -> TreeNode: ...
     def lookup(self, key: None) -> None: ...
-    def lookup_extended(self, lookup_key: None) -> Tuple[bool, None, None]: ...
+    def lookup_extended(self, lookup_key: None) -> tuple[bool, None, None]: ...
     def lookup_node(self, key: None) -> Optional[TreeNode]: ...
     def lower_bound(self, key: None) -> Optional[TreeNode]: ...
     @classmethod
@@ -2589,7 +2592,7 @@ class Uri(GObject.GBoxed):
     def error_quark() -> int: ...
     @staticmethod
     def escape_bytes(
-        unescaped: typing.Sequence[int], reserved_chars_allowed: Optional[str] = None
+        unescaped: Sequence[int], reserved_chars_allowed: Optional[str] = None
     ) -> str: ...
     @staticmethod
     def escape_string(
@@ -2652,15 +2655,15 @@ class Uri(GObject.GBoxed):
     @staticmethod
     def split(
         uri_ref: str, flags: UriFlags
-    ) -> Tuple[bool, str, str, str, int, str, str, str]: ...
+    ) -> tuple[bool, str, str, str, int, str, str, str]: ...
     @staticmethod
     def split_network(
         uri_string: str, flags: UriFlags
-    ) -> Tuple[bool, str, str, int]: ...
+    ) -> tuple[bool, str, str, int]: ...
     @staticmethod
     def split_with_user(
         uri_ref: str, flags: UriFlags
-    ) -> Tuple[bool, str, str, str, str, str, int, str, str, str]: ...
+    ) -> tuple[bool, str, str, str, str, str, int, str, str, str]: ...
     def to_string(self) -> str: ...
     def to_string_partial(self, flags: UriHideFlags) -> str: ...
     @staticmethod
@@ -2686,7 +2689,7 @@ class UriParamsIter(GObject.GPointer):
     def init(
         self, params: str, length: int, separators: str, flags: UriParamsFlags
     ) -> None: ...
-    def next(self) -> Tuple[bool, str, str]: ...
+    def next(self) -> tuple[bool, str, str]: ...
 
 class Variant(GObject.GPointer):
     # override
@@ -2698,7 +2701,7 @@ class Variant(GObject.GPointer):
     def dup_bytestring(self) -> bytes: ...
     def dup_bytestring_array(self) -> list[str]: ...
     def dup_objv(self) -> list[str]: ...
-    def dup_string(self) -> Tuple[str, int]: ...
+    def dup_string(self) -> tuple[str, int]: ...
     def dup_strv(self) -> list[str]: ...
     def equal(self, two: Variant) -> bool: ...
     def get_boolean(self) -> bool: ...
@@ -2744,16 +2747,16 @@ class Variant(GObject.GPointer):
     def new_array(
         cls,
         child_type: Optional[VariantType] = None,
-        children: Optional[typing.Sequence[Variant]] = None,
+        children: Optional[Sequence[Variant]] = None,
     ) -> Variant: ...
     @classmethod
     def new_boolean(cls, value: bool) -> Variant: ...
     @classmethod
     def new_byte(cls, value: int) -> Variant: ...
     @classmethod
-    def new_bytestring(cls, string: typing.Sequence[int]) -> Variant: ...
+    def new_bytestring(cls, string: Sequence[int]) -> Variant: ...
     @classmethod
-    def new_bytestring_array(cls, strv: typing.Sequence[str]) -> Variant: ...
+    def new_bytestring_array(cls, strv: Sequence[str]) -> Variant: ...
     @classmethod
     def new_dict_entry(cls, key: Variant, value: Variant) -> Variant: ...
     @classmethod
@@ -2774,7 +2777,7 @@ class Variant(GObject.GPointer):
     def new_from_data(
         cls,
         type: VariantType,
-        data: typing.Sequence[int],
+        data: Sequence[int],
         trusted: bool,
         notify: Callable[[None], None],
         user_data: None,
@@ -2794,13 +2797,13 @@ class Variant(GObject.GPointer):
     @classmethod
     def new_object_path(cls, object_path: str) -> Variant: ...
     @classmethod
-    def new_objv(cls, strv: typing.Sequence[str]) -> Variant: ...
+    def new_objv(cls, strv: Sequence[str]) -> Variant: ...
     @classmethod
     def new_signature(cls, signature: str) -> Variant: ...
     @classmethod
     def new_string(cls, string: str) -> Variant: ...
     @classmethod
-    def new_strv(cls, strv: typing.Sequence[str]) -> Variant: ...
+    def new_strv(cls, strv: Sequence[str]) -> Variant: ...
     # override
     @classmethod
     def new_tuple(cls, children: Variant) -> Variant: ...
@@ -2898,14 +2901,14 @@ class VariantType(GObject.GBoxed):
     @classmethod
     def new_maybe(cls, element: VariantType) -> VariantType: ...
     @classmethod
-    def new_tuple(cls, items: typing.Sequence[VariantType]) -> VariantType: ...
+    def new_tuple(cls, items: Sequence[VariantType]) -> VariantType: ...
     def next(self) -> VariantType: ...
     @staticmethod
     def string_get_depth_(type_string: str) -> int: ...
     @staticmethod
     def string_is_valid(type_string: str) -> bool: ...
     @staticmethod
-    def string_scan(string: str, limit: Optional[str] = None) -> Tuple[bool, str]: ...
+    def string_scan(string: str, limit: Optional[str] = None) -> tuple[bool, str]: ...
     def value(self) -> VariantType: ...
 
 class AsciiType(GObject.GFlags):
diff --git a/src/gi-stubs/repository/Gio.pyi b/src/gi-stubs/repository/Gio.pyi
index 60c577a..11b7ff0 100644
--- a/src/gi-stubs/repository/Gio.pyi
+++ b/src/gi-stubs/repository/Gio.pyi
@@ -4,7 +4,7 @@ from typing import Iterator
 from typing import Literal
 from typing import Optional
 from typing import Sequence
-from typing import Tuple
+from typing import tuple
 from typing import Type
 
 from gi.repository import GLib
@@ -138,7 +138,7 @@ _version: str = "2.0"
 def action_name_is_valid(action_name: str) -> bool: ...
 def action_parse_detailed_name(
     detailed_name: str,
-) -> Tuple[bool, str, GLib.Variant]: ...
+) -> tuple[bool, str, GLib.Variant]: ...
 def action_print_detailed_name(
     action_name: str, target_value: Optional[GLib.Variant] = None
 ) -> str: ...
@@ -241,7 +241,7 @@ def content_type_get_mime_type(type: str) -> Optional[str]: ...
 def content_type_get_symbolic_icon(type: str) -> Icon: ...
 def content_type_guess(
     filename: Optional[str] = None, data: Optional[Sequence[int]] = None
-) -> Tuple[str, bool]: ...
+) -> tuple[str, bool]: ...
 def content_type_guess_for_tree(root: File) -> list[str]: ...
 def content_type_is_a(type: str, supertype: str) -> bool: ...
 def content_type_is_mime_type(type: str, mime_type: str) -> bool: ...
@@ -258,10 +258,10 @@ def dbus_address_get_stream(
     callback: Optional[Callable[..., None]] = None,
     *user_data: Any,
 ) -> None: ...
-def dbus_address_get_stream_finish(res: AsyncResult) -> Tuple[IOStream, str]: ...
+def dbus_address_get_stream_finish(res: AsyncResult) -> tuple[IOStream, str]: ...
 def dbus_address_get_stream_sync(
     address: str, cancellable: Optional[Cancellable] = None
-) -> Tuple[IOStream, str]: ...
+) -> tuple[IOStream, str]: ...
 def dbus_annotation_info_lookup(
     annotations: Optional[Sequence[DBusAnnotationInfo]], name: str
 ) -> Optional[str]: ...
@@ -306,7 +306,7 @@ def file_new_for_commandline_arg(arg: str) -> File: ...
 def file_new_for_commandline_arg_and_cwd(arg: str, cwd: str) -> File: ...
 def file_new_for_path(path: str) -> File: ...
 def file_new_for_uri(uri: str) -> File: ...
-def file_new_tmp(tmpl: Optional[str] = None) -> Tuple[File, FileIOStream]: ...
+def file_new_tmp(tmpl: Optional[str] = None) -> tuple[File, FileIOStream]: ...
 def file_new_tmp_async(
     tmpl: Optional[str],
     io_priority: int,
@@ -322,7 +322,7 @@ def file_new_tmp_dir_async(
     *user_data: Any,
 ) -> None: ...
 def file_new_tmp_dir_finish(result: AsyncResult) -> File: ...
-def file_new_tmp_finish(result: AsyncResult) -> Tuple[File, FileIOStream]: ...
+def file_new_tmp_finish(result: AsyncResult) -> tuple[File, FileIOStream]: ...
 def file_parse_name(parse_name: str) -> File: ...
 def icon_deserialize(value: GLib.Variant) -> Optional[Icon]: ...
 def icon_hash(icon: None) -> int: ...
@@ -387,7 +387,7 @@ def pollable_stream_write_all(
     buffer: Sequence[int],
     blocking: bool,
     cancellable: Optional[Cancellable] = None,
-) -> Tuple[bool, int]: ...
+) -> tuple[bool, int]: ...
 def power_profile_monitor_dup_default() -> PowerProfileMonitor: ...
 def proxy_get_default_for_protocol(protocol: str) -> Optional[Proxy]: ...
 def proxy_resolver_get_default() -> ProxyResolver: ...
@@ -399,7 +399,7 @@ def resources_enumerate_children(
 ) -> list[str]: ...
 def resources_get_info(
     path: str, lookup_flags: ResourceLookupFlags
-) -> Tuple[bool, int, int]: ...
+) -> tuple[bool, int, int]: ...
 def resources_lookup_data(
     path: str, lookup_flags: ResourceLookupFlags
 ) -> GLib.Bytes: ...
@@ -428,10 +428,10 @@ def tls_server_connection_new(
 def unix_is_mount_path_system_internal(mount_path: str) -> bool: ...
 def unix_is_system_device_path(device_path: str) -> bool: ...
 def unix_is_system_fs_type(fs_type: str) -> bool: ...
-def unix_mount_at(mount_path: str) -> Tuple[Optional[UnixMountEntry], int]: ...
+def unix_mount_at(mount_path: str) -> tuple[Optional[UnixMountEntry], int]: ...
 def unix_mount_compare(mount1: UnixMountEntry, mount2: UnixMountEntry) -> int: ...
 def unix_mount_copy(mount_entry: UnixMountEntry) -> UnixMountEntry: ...
-def unix_mount_for(file_path: str) -> Tuple[Optional[UnixMountEntry], int]: ...
+def unix_mount_for(file_path: str) -> tuple[Optional[UnixMountEntry], int]: ...
 def unix_mount_free(mount_entry: UnixMountEntry) -> None: ...
 def unix_mount_get_device_path(mount_entry: UnixMountEntry) -> str: ...
 def unix_mount_get_fs_type(mount_entry: UnixMountEntry) -> str: ...
@@ -445,11 +445,11 @@ def unix_mount_guess_should_display(mount_entry: UnixMountEntry) -> bool: ...
 def unix_mount_guess_symbolic_icon(mount_entry: UnixMountEntry) -> Icon: ...
 def unix_mount_is_readonly(mount_entry: UnixMountEntry) -> bool: ...
 def unix_mount_is_system_internal(mount_entry: UnixMountEntry) -> bool: ...
-def unix_mount_point_at(mount_path: str) -> Tuple[Optional[UnixMountPoint], int]: ...
+def unix_mount_point_at(mount_path: str) -> tuple[Optional[UnixMountPoint], int]: ...
 def unix_mount_points_changed_since(time: int) -> bool: ...
-def unix_mount_points_get() -> Tuple[list[UnixMountPoint], int]: ...
+def unix_mount_points_get() -> tuple[list[UnixMountPoint], int]: ...
 def unix_mounts_changed_since(time: int) -> bool: ...
-def unix_mounts_get() -> Tuple[list[UnixMountEntry], int]: ...
+def unix_mounts_get() -> tuple[list[UnixMountEntry], int]: ...
 
 class Action(GObject.GInterface):
     def activate(self, parameter: Optional[GLib.Variant] = None) -> None: ...
@@ -463,7 +463,7 @@ class Action(GObject.GInterface):
     @staticmethod
     def name_is_valid(action_name: str) -> bool: ...
     @staticmethod
-    def parse_detailed_name(detailed_name: str) -> Tuple[bool, str, GLib.Variant]: ...
+    def parse_detailed_name(detailed_name: str) -> tuple[bool, str, GLib.Variant]: ...
     @staticmethod
     def print_detailed_name(
         action_name: str, target_value: Optional[GLib.Variant] = None
@@ -497,7 +497,7 @@ class ActionGroup(GObject.GInterface):
     def list_actions(self) -> list[str]: ...
     def query_action(
         self, action_name: str
-    ) -> Tuple[
+    ) -> tuple[
         bool, bool, GLib.VariantType, GLib.VariantType, GLib.Variant, GLib.Variant
     ]: ...
 
@@ -522,7 +522,7 @@ class ActionGroupInterface(GObject.GPointer):
     action_state_changed: Callable[[ActionGroup, str, GLib.Variant], None] = ...
     query_action: Callable[
         [ActionGroup, str],
-        Tuple[
+        tuple[
             bool, bool, GLib.VariantType, GLib.VariantType, GLib.Variant, GLib.Variant
         ],
     ] = ...
@@ -764,7 +764,7 @@ class Application(GObject.Object, ActionGroup, ActionMap):
         self, connection: DBusConnection, object_path: str
     ) -> None: ...
     def do_handle_local_options(self, options: GLib.VariantDict) -> int: ...
-    def do_local_command_line(self) -> Tuple[bool, list[str], int]: ...
+    def do_local_command_line(self) -> tuple[bool, list[str], int]: ...
     def do_name_lost(self) -> bool: ...
     def do_open(self, files: Sequence[File], hint: str) -> None: ...
     def do_quit_mainloop(self) -> None: ...
@@ -822,7 +822,7 @@ class ApplicationClass(GObject.GPointer):
     activate: Callable[[Application], None] = ...
     open: Callable[[Application, Sequence[File], str], None] = ...
     command_line: Callable[[Application, ApplicationCommandLine], int] = ...
-    local_command_line: Callable[[Application], Tuple[bool, list[str], int]] = ...
+    local_command_line: Callable[[Application], tuple[bool, list[str], int]] = ...
     before_emit: Callable[[Application, GLib.Variant], None] = ...
     after_emit: Callable[[Application, GLib.Variant], None] = ...
     add_platform_data: Callable[[Application, GLib.VariantBuilder], None] = ...
@@ -1073,14 +1073,14 @@ class CharsetConverterClass(GObject.GPointer):
 class Converter(GObject.GInterface):
     def convert(
         self, inbuf: Sequence[int], outbuf: Sequence[int], flags: ConverterFlags
-    ) -> Tuple[ConverterResult, int, int]: ...
+    ) -> tuple[ConverterResult, int, int]: ...
     def reset(self) -> None: ...
 
 class ConverterIface(GObject.GPointer):
     g_iface: GObject.TypeInterface = ...
     convert: Callable[
         [Converter, Optional[Sequence[int]], Optional[Sequence[int]], ConverterFlags],
-        Tuple[ConverterResult, int, int],
+        tuple[ConverterResult, int, int],
     ] = ...
     reset: Callable[[Converter], None] = ...
 
@@ -1261,7 +1261,7 @@ class DBusConnection(GObject.Object, AsyncInitable, Initable):
     ) -> None: ...
     def call_with_unix_fd_list_finish(
         self, res: AsyncResult
-    ) -> Tuple[GLib.Variant, UnixFDList]: ...
+    ) -> tuple[GLib.Variant, UnixFDList]: ...
     def call_with_unix_fd_list_sync(
         self,
         bus_name: Optional[str],
@@ -1274,7 +1274,7 @@ class DBusConnection(GObject.Object, AsyncInitable, Initable):
         timeout_msec: int,
         fd_list: Optional[UnixFDList] = None,
         cancellable: Optional[Cancellable] = None,
-    ) -> Tuple[GLib.Variant, UnixFDList]: ...
+    ) -> tuple[GLib.Variant, UnixFDList]: ...
     def close(
         self,
         cancellable: Optional[Cancellable] = None,
@@ -1371,7 +1371,7 @@ class DBusConnection(GObject.Object, AsyncInitable, Initable):
     def remove_filter(self, filter_id: int) -> None: ...
     def send_message(
         self, message: DBusMessage, flags: DBusSendMessageFlags
-    ) -> Tuple[bool, int]: ...
+    ) -> tuple[bool, int]: ...
     def send_message_with_reply(
         self,
         message: DBusMessage,
@@ -1388,7 +1388,7 @@ class DBusConnection(GObject.Object, AsyncInitable, Initable):
         flags: DBusSendMessageFlags,
         timeout_msec: int,
         cancellable: Optional[Cancellable] = None,
-    ) -> Tuple[DBusMessage, int]: ...
+    ) -> tuple[DBusMessage, int]: ...
     def set_exit_on_close(self, exit_on_close: bool) -> None: ...
     def signal_subscribe(
         self,
@@ -1888,7 +1888,7 @@ class DBusProxy(GObject.Object, AsyncInitable, DBusInterface, Initable):
     ) -> None: ...
     def call_with_unix_fd_list_finish(
         self, res: AsyncResult
-    ) -> Tuple[GLib.Variant, UnixFDList]: ...
+    ) -> tuple[GLib.Variant, UnixFDList]: ...
     def call_with_unix_fd_list_sync(
         self,
         method_name: str,
@@ -1897,7 +1897,7 @@ class DBusProxy(GObject.Object, AsyncInitable, DBusInterface, Initable):
         timeout_msec: int,
         fd_list: Optional[UnixFDList] = None,
         cancellable: Optional[Cancellable] = None,
-    ) -> Tuple[GLib.Variant, UnixFDList]: ...
+    ) -> tuple[GLib.Variant, UnixFDList]: ...
     def do_g_properties_changed(
         self, changed_properties: GLib.Variant, invalidated_properties: str
     ) -> None: ...
@@ -2054,7 +2054,7 @@ class DataInputStream(BufferedInputStream, Seekable):
     def read_int64(self, cancellable: Optional[Cancellable] = None) -> int: ...
     def read_line(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[Optional[bytes], int]: ...
+    ) -> tuple[Optional[bytes], int]: ...
     def read_line_async(
         self,
         io_priority: int,
@@ -2062,19 +2062,19 @@ class DataInputStream(BufferedInputStream, Seekable):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def read_line_finish(self, result: AsyncResult) -> Tuple[Optional[bytes], int]: ...
+    def read_line_finish(self, result: AsyncResult) -> tuple[Optional[bytes], int]: ...
     def read_line_finish_utf8(
         self, result: AsyncResult
-    ) -> Tuple[Optional[str], int]: ...
+    ) -> tuple[Optional[str], int]: ...
     def read_line_utf8(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[Optional[str], int]: ...
+    ) -> tuple[Optional[str], int]: ...
     def read_uint16(self, cancellable: Optional[Cancellable] = None) -> int: ...
     def read_uint32(self, cancellable: Optional[Cancellable] = None) -> int: ...
     def read_uint64(self, cancellable: Optional[Cancellable] = None) -> int: ...
     def read_until(
         self, stop_chars: str, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[str, int]: ...
+    ) -> tuple[str, int]: ...
     def read_until_async(
         self,
         stop_chars: str,
@@ -2083,13 +2083,13 @@ class DataInputStream(BufferedInputStream, Seekable):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def read_until_finish(self, result: AsyncResult) -> Tuple[str, int]: ...
+    def read_until_finish(self, result: AsyncResult) -> tuple[str, int]: ...
     def read_upto(
         self,
         stop_chars: str,
         stop_chars_len: int,
         cancellable: Optional[Cancellable] = None,
-    ) -> Tuple[str, int]: ...
+    ) -> tuple[str, int]: ...
     def read_upto_async(
         self,
         stop_chars: str,
@@ -2099,7 +2099,7 @@ class DataInputStream(BufferedInputStream, Seekable):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def read_upto_finish(self, result: AsyncResult) -> Tuple[str, int]: ...
+    def read_upto_finish(self, result: AsyncResult) -> tuple[str, int]: ...
     def set_byte_order(self, order: DataStreamByteOrder) -> None: ...
     def set_newline_type(self, type: DataStreamNewlineType) -> None: ...
 
@@ -2433,7 +2433,7 @@ class DtlsConnection(GObject.GInterface):
     def get_certificate(self) -> Optional[TlsCertificate]: ...
     def get_channel_binding_data(
         self, type: TlsChannelBindingType
-    ) -> Tuple[bool, bytes]: ...
+    ) -> tuple[bool, bytes]: ...
     def get_ciphersuite_name(self) -> Optional[str]: ...
     def get_database(self) -> Optional[TlsDatabase]: ...
     def get_interaction(self) -> Optional[TlsInteraction]: ...
@@ -2679,27 +2679,27 @@ class File(GObject.GInterface):
     def is_native(self) -> bool: ...
     def load_bytes(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[GLib.Bytes, str]: ...
+    ) -> tuple[GLib.Bytes, str]: ...
     def load_bytes_async(
         self,
         cancellable: Optional[Cancellable] = None,
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def load_bytes_finish(self, result: AsyncResult) -> Tuple[GLib.Bytes, str]: ...
+    def load_bytes_finish(self, result: AsyncResult) -> tuple[GLib.Bytes, str]: ...
     def load_contents(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, bytes, str]: ...
+    ) -> tuple[bool, bytes, str]: ...
     def load_contents_async(
         self,
         cancellable: Optional[Cancellable] = None,
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def load_contents_finish(self, res: AsyncResult) -> Tuple[bool, bytes, str]: ...
+    def load_contents_finish(self, res: AsyncResult) -> tuple[bool, bytes, str]: ...
     def load_partial_contents_finish(
         self, res: AsyncResult
-    ) -> Tuple[bool, bytes, str]: ...
+    ) -> tuple[bool, bytes, str]: ...
     def make_directory(self, cancellable: Optional[Cancellable] = None) -> bool: ...
     def make_directory_async(
         self,
@@ -2726,7 +2726,7 @@ class File(GObject.GInterface):
     def make_symbolic_link_finish(self, result: AsyncResult) -> bool: ...
     def measure_disk_usage_finish(
         self, result: AsyncResult
-    ) -> Tuple[bool, int, int, int]: ...
+    ) -> tuple[bool, int, int, int]: ...
     def monitor(
         self, flags: FileMonitorFlags, cancellable: Optional[Cancellable] = None
     ) -> FileMonitor: ...
@@ -2782,7 +2782,7 @@ class File(GObject.GInterface):
     @staticmethod
     def new_for_uri(uri: str) -> File: ...
     @staticmethod
-    def new_tmp(tmpl: Optional[str] = None) -> Tuple[File, FileIOStream]: ...
+    def new_tmp(tmpl: Optional[str] = None) -> tuple[File, FileIOStream]: ...
     @staticmethod
     def new_tmp_async(
         tmpl: Optional[str],
@@ -2802,7 +2802,7 @@ class File(GObject.GInterface):
     @staticmethod
     def new_tmp_dir_finish(result: AsyncResult) -> File: ...
     @staticmethod
-    def new_tmp_finish(result: AsyncResult) -> Tuple[File, FileIOStream]: ...
+    def new_tmp_finish(result: AsyncResult) -> tuple[File, FileIOStream]: ...
     def open_readwrite(
         self, cancellable: Optional[Cancellable] = None
     ) -> FileIOStream: ...
@@ -2906,7 +2906,7 @@ class File(GObject.GInterface):
         make_backup: bool,
         flags: FileCreateFlags,
         cancellable: Optional[Cancellable] = None,
-    ) -> Tuple[bool, str]: ...
+    ) -> tuple[bool, str]: ...
     def replace_contents_async(
         self,
         contents: Sequence[int],
@@ -2927,7 +2927,7 @@ class File(GObject.GInterface):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def replace_contents_finish(self, res: AsyncResult) -> Tuple[bool, str]: ...
+    def replace_contents_finish(self, res: AsyncResult) -> tuple[bool, str]: ...
     def replace_finish(self, res: AsyncResult) -> FileOutputStream: ...
     def replace_readwrite(
         self,
@@ -3007,7 +3007,7 @@ class File(GObject.GInterface):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def set_attributes_finish(self, result: AsyncResult) -> Tuple[bool, FileInfo]: ...
+    def set_attributes_finish(self, result: AsyncResult) -> tuple[bool, FileInfo]: ...
     def set_attributes_from_info(
         self,
         info: FileInfo,
@@ -3155,7 +3155,7 @@ class FileEnumerator(GObject.Object):
     def is_closed(self) -> bool: ...
     def iterate(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, FileInfo, File]: ...
+    ) -> tuple[bool, FileInfo, File]: ...
     def next(self): ...  # FIXME Function
     def next_file(
         self, cancellable: Optional[Cancellable] = None
@@ -3327,7 +3327,7 @@ class FileIface(GObject.GPointer):
         [File, FileInfo, FileQueryInfoFlags, Optional[Cancellable]], bool
     ] = ...
     set_attributes_async: Callable[..., None] = ...
-    set_attributes_finish: Callable[[File, AsyncResult], Tuple[bool, FileInfo]] = ...
+    set_attributes_finish: Callable[[File, AsyncResult], tuple[bool, FileInfo]] = ...
     read_fn: Callable[[File, Optional[Cancellable]], FileInputStream] = ...
     read_async: Callable[..., None] = ...
     read_finish: Callable[[File, AsyncResult], FileInputStream] = ...
@@ -3407,7 +3407,7 @@ class FileIface(GObject.GPointer):
     measure_disk_usage: None = ...
     measure_disk_usage_async: None = ...
     measure_disk_usage_finish: Callable[
-        [File, AsyncResult], Tuple[bool, int, int, int]
+        [File, AsyncResult], tuple[bool, int, int, int]
     ] = ...
 
 class FileInfo(GObject.Object):
@@ -3420,7 +3420,7 @@ class FileInfo(GObject.Object):
     def get_attribute_byte_string(self, attribute: str) -> Optional[str]: ...
     def get_attribute_data(
         self, attribute: str
-    ) -> Tuple[bool, FileAttributeType, None, FileAttributeStatus]: ...
+    ) -> tuple[bool, FileAttributeType, None, FileAttributeStatus]: ...
     def get_attribute_int32(self, attribute: str) -> int: ...
     def get_attribute_int64(self, attribute: str) -> int: ...
     def get_attribute_object(self, attribute: str) -> Optional[GObject.Object]: ...
@@ -4004,10 +4004,10 @@ class InputStream(GObject.Object):
     def do_skip_finish(self, result: AsyncResult) -> int: ...
     def has_pending(self) -> bool: ...
     def is_closed(self) -> bool: ...
-    def read(self, cancellable: Optional[Cancellable] = None) -> Tuple[int, bytes]: ...
+    def read(self, cancellable: Optional[Cancellable] = None) -> tuple[int, bytes]: ...
     def read_all(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, bytes, int]: ...
+    ) -> tuple[bool, bytes, int]: ...
     def read_all_async(
         self,
         io_priority: int,
@@ -4015,7 +4015,7 @@ class InputStream(GObject.Object):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> bytes: ...
-    def read_all_finish(self, result: AsyncResult) -> Tuple[bool, int]: ...
+    def read_all_finish(self, result: AsyncResult) -> tuple[bool, int]: ...
     def read_async(
         self,
         io_priority: int,
@@ -4072,21 +4072,21 @@ class InputVector(GObject.GPointer):
     size: int = ...
 
 # override
-class ListModel(GObject.GInterface):
+class ListModel[T: GObject.Object](GObject.GInterface):
     def __contains__(self, item: object) -> bool: ...
-    def __getitem__(self, position: int) -> GObject.Object: ...
-    def __iter__(self) -> Iterator[GObject.Object]: ...
+    def __getitem__(self, position: int) -> T: ...
+    def __iter__(self) -> Iterator[T]: ...
     def __len__(self) -> int: ...
-    def get_item(self, position: int) -> Optional[GObject.Object]: ...
+    def get_item(self, position: int) -> T | None: ...
     def get_item_type(self) -> Type: ...
     def get_n_items(self) -> int: ...
     def items_changed(self, position: int, removed: int, added: int) -> None: ...
 
-class ListModelInterface(GObject.GPointer):
+class ListModelInterface[T](GObject.GPointer):
     g_iface: GObject.TypeInterface = ...
-    get_item_type: Callable[[ListModel], Type] = ...
-    get_n_items: Callable[[ListModel], int] = ...
-    get_item: Callable[[ListModel, int], Optional[GObject.Object]] = ...
+    get_item_type: Callable[[ListModel[T]], Type] = ...
+    get_n_items: Callable[[ListModel[T]], int] = ...
+    get_item: Callable[[ListModel[T], int], GObject.Object | None] = ...
 
 class ListStore(GObject.Object, ListModel):
     class Props:
@@ -4096,13 +4096,13 @@ class ListStore(GObject.Object, ListModel):
     props: Props = ...
     def __init__(self, item_type: Type = ...): ...
     def append(self, item: GObject.Object) -> None: ...
-    def find(self, item: GObject.Object) -> Tuple[bool, int]: ...
+    def find(self, item: GObject.Object) -> tuple[bool, int]: ...
     def find_with_equal_func(
         self, item: GObject.Object, equal_func: Callable[[None, None], bool]
-    ) -> Tuple[bool, int]: ...
+    ) -> tuple[bool, int]: ...
     def find_with_equal_func_full(
         self, item: GObject.Object, equal_func: Callable[..., bool], *user_data: Any
-    ) -> Tuple[bool, int]: ...
+    ) -> tuple[bool, int]: ...
     def insert(self, position: int, item: GObject.Object) -> None: ...
     def insert_sorted(self, item, compare_func, *user_data): ...  # FIXME Function
     @classmethod
@@ -4119,24 +4119,24 @@ class ListStoreClass(GObject.GPointer):
 
 class LoadableIcon(GObject.GInterface):
     def load(
-        self, size: int, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[InputStream, str]: ...
+        self, size: int, cancellable: Cancellable | None = None
+    ) -> tuple[InputStream, str]: ...
     def load_async(
         self,
         size: int,
-        cancellable: Optional[Cancellable] = None,
-        callback: Optional[Callable[..., None]] = None,
+        cancellable: Cancellable | None = None,
+        callback: Callable[..., None] | None = None,
         *user_data: Any,
     ) -> None: ...
-    def load_finish(self, res: AsyncResult) -> Tuple[InputStream, str]: ...
+    def load_finish(self, res: AsyncResult) -> tuple[InputStream, str]: ...
 
 class LoadableIconIface(GObject.GPointer):
     g_iface: GObject.TypeInterface = ...
     load: Callable[
-        [LoadableIcon, int, Optional[Cancellable]], Tuple[InputStream, str]
+        [LoadableIcon, int, Optional[Cancellable]], tuple[InputStream, str]
     ] = ...
     load_async: Callable[..., None] = ...
-    load_finish: Callable[[LoadableIcon, AsyncResult], Tuple[InputStream, str]] = ...
+    load_finish: Callable[[LoadableIcon, AsyncResult], tuple[InputStream, str]] = ...
 
 class MemoryInputStream(InputStream, PollableInputStream, Seekable):
     parent_instance: InputStream = ...
@@ -4235,15 +4235,15 @@ class Menu(MenuModel):
 class MenuAttributeIter(GObject.Object):
     parent_instance: GObject.Object = ...
     priv: MenuAttributeIterPrivate = ...
-    def do_get_next(self) -> Tuple[bool, str, GLib.Variant]: ...
+    def do_get_next(self) -> tuple[bool, str, GLib.Variant]: ...
     def get_name(self) -> str: ...
-    def get_next(self) -> Tuple[bool, str, GLib.Variant]: ...
+    def get_next(self) -> tuple[bool, str, GLib.Variant]: ...
     def get_value(self) -> GLib.Variant: ...
     def next(self) -> bool: ...
 
 class MenuAttributeIterClass(GObject.GPointer):
     parent_class: GObject.ObjectClass = ...
-    get_next: Callable[[MenuAttributeIter], Tuple[bool, str, GLib.Variant]] = ...
+    get_next: Callable[[MenuAttributeIter], tuple[bool, str, GLib.Variant]] = ...
 
 class MenuAttributeIterPrivate(GObject.GPointer): ...
 
@@ -4266,7 +4266,7 @@ class MenuItem(GObject.Object):
         self, action: Optional[str] = None, target_value: Optional[GLib.Variant] = None
     ) -> None: ...
     # override
-    def set_attribute(self, attributes: list[Tuple[str, str, Any]]) -> None: ...
+    def set_attribute(self, attributes: list[tuple[str, str, Any]]) -> None: ...
     def set_attribute_value(
         self, attribute: str, value: Optional[GLib.Variant] = None
     ) -> None: ...
@@ -4280,15 +4280,15 @@ class MenuItem(GObject.Object):
 class MenuLinkIter(GObject.Object):
     parent_instance: GObject.Object = ...
     priv: MenuLinkIterPrivate = ...
-    def do_get_next(self) -> Tuple[bool, str, MenuModel]: ...
+    def do_get_next(self) -> tuple[bool, str, MenuModel]: ...
     def get_name(self) -> str: ...
-    def get_next(self) -> Tuple[bool, str, MenuModel]: ...
+    def get_next(self) -> tuple[bool, str, MenuModel]: ...
     def get_value(self) -> MenuModel: ...
     def next(self) -> bool: ...
 
 class MenuLinkIterClass(GObject.GPointer):
     parent_class: GObject.ObjectClass = ...
-    get_next: Callable[[MenuLinkIter], Tuple[bool, str, MenuModel]] = ...
+    get_next: Callable[[MenuLinkIter], tuple[bool, str, MenuModel]] = ...
 
 class MenuLinkIterPrivate(GObject.GPointer): ...
 
@@ -4728,10 +4728,10 @@ class OutputStream(GObject.Object):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def do_writev_finish(self, result: AsyncResult) -> Tuple[bool, int]: ...
+    def do_writev_finish(self, result: AsyncResult) -> tuple[bool, int]: ...
     def do_writev_fn(
         self, vectors: Sequence[OutputVector], cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, int]: ...
+    ) -> tuple[bool, int]: ...
     def flush(self, cancellable: Optional[Cancellable] = None) -> bool: ...
     def flush_async(
         self,
@@ -4766,7 +4766,7 @@ class OutputStream(GObject.Object):
     ) -> int: ...
     def write_all(
         self, buffer: Sequence[int], cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, int]: ...
+    ) -> tuple[bool, int]: ...
     def write_all_async(
         self,
         buffer: Sequence[int],
@@ -4775,7 +4775,7 @@ class OutputStream(GObject.Object):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def write_all_finish(self, result: AsyncResult) -> Tuple[bool, int]: ...
+    def write_all_finish(self, result: AsyncResult) -> tuple[bool, int]: ...
     def write_async(
         self,
         buffer: Sequence[int],
@@ -4799,10 +4799,10 @@ class OutputStream(GObject.Object):
     def write_finish(self, result: AsyncResult) -> int: ...
     def writev(
         self, vectors: Sequence[OutputVector], cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, int]: ...
+    ) -> tuple[bool, int]: ...
     def writev_all(
         self, vectors: Sequence[OutputVector], cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, int]: ...
+    ) -> tuple[bool, int]: ...
     def writev_all_async(
         self,
         vectors: Sequence[OutputVector],
@@ -4811,7 +4811,7 @@ class OutputStream(GObject.Object):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def writev_all_finish(self, result: AsyncResult) -> Tuple[bool, int]: ...
+    def writev_all_finish(self, result: AsyncResult) -> tuple[bool, int]: ...
     def writev_async(
         self,
         vectors: Sequence[OutputVector],
@@ -4820,7 +4820,7 @@ class OutputStream(GObject.Object):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def writev_finish(self, result: AsyncResult) -> Tuple[bool, int]: ...
+    def writev_finish(self, result: AsyncResult) -> tuple[bool, int]: ...
 
 class OutputStreamClass(GObject.GPointer):
     parent_class: GObject.ObjectClass = ...
@@ -4841,10 +4841,10 @@ class OutputStreamClass(GObject.GPointer):
     close_async: Callable[..., None] = ...
     close_finish: Callable[[OutputStream, AsyncResult], bool] = ...
     writev_fn: Callable[
-        [OutputStream, Sequence[OutputVector], Optional[Cancellable]], Tuple[bool, int]
+        [OutputStream, Sequence[OutputVector], Optional[Cancellable]], tuple[bool, int]
     ] = ...
     writev_async: Callable[..., None] = ...
-    writev_finish: Callable[[OutputStream, AsyncResult], Tuple[bool, int]] = ...
+    writev_finish: Callable[[OutputStream, AsyncResult], tuple[bool, int]] = ...
     _g_reserved4: None = ...
     _g_reserved5: None = ...
     _g_reserved6: None = ...
@@ -4925,7 +4925,7 @@ class PollableInputStream(GObject.GInterface):
     def is_readable(self) -> bool: ...
     def read_nonblocking(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[int, bytes]: ...
+    ) -> tuple[int, bytes]: ...
 
 class PollableInputStreamInterface(GObject.GPointer):
     g_iface: GObject.TypeInterface = ...
@@ -4934,7 +4934,7 @@ class PollableInputStreamInterface(GObject.GPointer):
     create_source: Callable[
         [PollableInputStream, Optional[Cancellable]], GLib.Source
     ] = ...
-    read_nonblocking: Callable[[PollableInputStream], Tuple[int, bytes]] = ...
+    read_nonblocking: Callable[[PollableInputStream], tuple[int, bytes]] = ...
 
 class PollableOutputStream(GObject.GInterface):
     def can_poll(self) -> bool: ...
@@ -4947,7 +4947,7 @@ class PollableOutputStream(GObject.GInterface):
     ) -> int: ...
     def writev_nonblocking(
         self, vectors: Sequence[OutputVector], cancellable: Optional[Cancellable] = None
-    ) -> Tuple[PollableReturn, int]: ...
+    ) -> tuple[PollableReturn, int]: ...
 
 class PollableOutputStreamInterface(GObject.GPointer):
     g_iface: GObject.TypeInterface = ...
@@ -4960,7 +4960,7 @@ class PollableOutputStreamInterface(GObject.GPointer):
         [PollableOutputStream, Optional[Sequence[int]]], int
     ] = ...
     writev_nonblocking: Callable[
-        [PollableOutputStream, Sequence[OutputVector]], Tuple[PollableReturn, int]
+        [PollableOutputStream, Sequence[OutputVector]], tuple[PollableReturn, int]
     ] = ...
 
 class PowerProfileMonitor(GObject.GInterface):
@@ -5172,8 +5172,8 @@ class Resolver(GObject.Object):
     def do_lookup_by_name_async(
         self,
         hostname: str,
-        cancellable: Optional[Cancellable] = None,
-        callback: Optional[Callable[..., None]] = None,
+        cancellable: Cancellable | None = None,
+        callback: Callable[..., None] | None = None,
         *user_data: Any,
     ) -> None: ...
     def do_lookup_by_name_finish(self, result: AsyncResult) -> list[InetAddress]: ...
@@ -5331,7 +5331,7 @@ class Resource(GObject.GBoxed):
     ) -> list[str]: ...
     def get_info(
         self, path: str, lookup_flags: ResourceLookupFlags
-    ) -> Tuple[bool, int, int]: ...
+    ) -> tuple[bool, int, int]: ...
     @staticmethod
     def load(filename: str) -> Resource: ...
     def lookup_data(
@@ -5411,7 +5411,7 @@ class Settings(GObject.Object):
     def get_int(self, key: str) -> int: ...
     def get_int64(self, key: str) -> int: ...
     def get_mapped(
-        self, key: str, mapping: Callable[..., Tuple[bool, None]], *user_data: Any
+        self, key: str, mapping: Callable[..., tuple[bool, None]], *user_data: Any
     ) -> None: ...
     def get_range(self, key: str) -> GLib.Variant: ...
     def get_string(self, key: str) -> str: ...
@@ -5483,7 +5483,7 @@ class SettingsBackend(GObject.Object):
     def do_write(self, key: str, value: GLib.Variant, origin_tag: None) -> bool: ...
     def do_write_tree(self, tree: GLib.Tree, origin_tag: None) -> bool: ...
     @staticmethod
-    def flatten_tree(tree: GLib.Tree) -> Tuple[str, list[str], list[GLib.Variant]]: ...
+    def flatten_tree(tree: GLib.Tree) -> tuple[str, list[str], list[GLib.Variant]]: ...
     @staticmethod
     def get_default() -> SettingsBackend: ...
     def keys_changed(
@@ -5545,7 +5545,7 @@ class SettingsSchemaKey(GObject.GBoxed):
 class SettingsSchemaSource(GObject.GBoxed):
     @staticmethod
     def get_default() -> Optional[SettingsSchemaSource]: ...
-    def list_schemas(self, recursive: bool) -> Tuple[list[str], list[str]]: ...
+    def list_schemas(self, recursive: bool) -> tuple[list[str], list[str]]: ...
     def lookup(self, schema_id: str, recursive: bool) -> Optional[SettingsSchema]: ...
     @classmethod
     def new_from_directory(
@@ -5751,7 +5751,7 @@ class Socket(GObject.Object, DatagramBased, Initable):
     def get_local_address(self) -> SocketAddress: ...
     def get_multicast_loopback(self) -> bool: ...
     def get_multicast_ttl(self) -> int: ...
-    def get_option(self, level: int, optname: int) -> Tuple[bool, int]: ...
+    def get_option(self, level: int, optname: int) -> tuple[bool, int]: ...
     def get_protocol(self) -> SocketProtocol: ...
     def get_remote_address(self) -> SocketAddress: ...
     def get_socket_type(self) -> SocketType: ...
@@ -5786,13 +5786,13 @@ class Socket(GObject.Object, DatagramBased, Initable):
     def new_from_fd(cls, fd: int) -> Socket: ...
     def receive(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[int, bytes]: ...
+    ) -> tuple[int, bytes]: ...
     def receive_from(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[int, SocketAddress, bytes]: ...
+    ) -> tuple[int, SocketAddress, bytes]: ...
     def receive_message(
         self, vectors: Sequence[InputVector], cancellable: Optional[Cancellable] = None
-    ) -> Tuple[int, SocketAddress, list[SocketControlMessage], int]: ...
+    ) -> tuple[int, SocketAddress, list[SocketControlMessage], int]: ...
     def receive_messages(
         self,
         messages: Sequence[InputMessage],
@@ -5801,27 +5801,27 @@ class Socket(GObject.Object, DatagramBased, Initable):
     ) -> int: ...
     def receive_with_blocking(
         self, blocking: bool, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[int, bytes]: ...
+    ) -> tuple[int, bytes]: ...
     def send(
         self, buffer: Sequence[int], cancellable: Optional[Cancellable] = None
     ) -> int: ...
     def send_message(
         self,
-        address: Optional[SocketAddress],
+        address: SocketAddress | None,
         vectors: Sequence[OutputVector],
-        messages: Optional[Sequence[SocketControlMessage]],
+        messages: Sequence[SocketControlMessage] | None,
         flags: int,
-        cancellable: Optional[Cancellable] = None,
+        cancellable: Cancellable | None = None,
     ) -> int: ...
     def send_message_with_timeout(
         self,
-        address: Optional[SocketAddress],
+        address: SocketAddress | None,
         vectors: Sequence[OutputVector],
-        messages: Optional[Sequence[SocketControlMessage]],
+        messages: Sequence[SocketControlMessage] | None,
         flags: int,
         timeout_us: int,
-        cancellable: Optional[Cancellable] = None,
-    ) -> Tuple[PollableReturn, int]: ...
+        cancellable: Cancellable | None = None,
+    ) -> tuple[PollableReturn, int]: ...
     def send_messages(
         self,
         messages: Sequence[OutputMessage],
@@ -6136,7 +6136,7 @@ class SocketListener(GObject.Object):
     def __init__(self, listen_backlog: int = ...): ...
     def accept(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[SocketConnection, GObject.Object]: ...
+    ) -> tuple[SocketConnection, GObject.Object]: ...
     def accept_async(
         self,
         cancellable: Optional[Cancellable] = None,
@@ -6145,10 +6145,10 @@ class SocketListener(GObject.Object):
     ) -> None: ...
     def accept_finish(
         self, result: AsyncResult
-    ) -> Tuple[SocketConnection, GObject.Object]: ...
+    ) -> tuple[SocketConnection, GObject.Object]: ...
     def accept_socket(
         self, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[Socket, GObject.Object]: ...
+    ) -> tuple[Socket, GObject.Object]: ...
     def accept_socket_async(
         self,
         cancellable: Optional[Cancellable] = None,
@@ -6157,14 +6157,14 @@ class SocketListener(GObject.Object):
     ) -> None: ...
     def accept_socket_finish(
         self, result: AsyncResult
-    ) -> Tuple[Socket, GObject.Object]: ...
+    ) -> tuple[Socket, GObject.Object]: ...
     def add_address(
         self,
         address: SocketAddress,
         type: SocketType,
         protocol: SocketProtocol,
         source_object: Optional[GObject.Object] = None,
-    ) -> Tuple[bool, SocketAddress]: ...
+    ) -> tuple[bool, SocketAddress]: ...
     def add_any_inet_port(
         self, source_object: Optional[GObject.Object] = None
     ) -> int: ...
@@ -6255,7 +6255,7 @@ class Subprocess(GObject.Object, Initable):
         self,
         stdin_buf: Optional[GLib.Bytes] = None,
         cancellable: Optional[Cancellable] = None,
-    ) -> Tuple[bool, GLib.Bytes, GLib.Bytes]: ...
+    ) -> tuple[bool, GLib.Bytes, GLib.Bytes]: ...
     def communicate_async(
         self,
         stdin_buf: Optional[GLib.Bytes] = None,
@@ -6265,10 +6265,10 @@ class Subprocess(GObject.Object, Initable):
     ) -> None: ...
     def communicate_finish(
         self, result: AsyncResult
-    ) -> Tuple[bool, GLib.Bytes, GLib.Bytes]: ...
+    ) -> tuple[bool, GLib.Bytes, GLib.Bytes]: ...
     def communicate_utf8(
         self, stdin_buf: Optional[str] = None, cancellable: Optional[Cancellable] = None
-    ) -> Tuple[bool, str, str]: ...
+    ) -> tuple[bool, str, str]: ...
     def communicate_utf8_async(
         self,
         stdin_buf: Optional[str] = None,
@@ -6276,7 +6276,7 @@ class Subprocess(GObject.Object, Initable):
         callback: Optional[Callable[..., None]] = None,
         *user_data: Any,
     ) -> None: ...
-    def communicate_utf8_finish(self, result: AsyncResult) -> Tuple[bool, str, str]: ...
+    def communicate_utf8_finish(self, result: AsyncResult) -> tuple[bool, str, str]: ...
     def force_exit(self) -> None: ...
     def get_exit_status(self) -> int: ...
     def get_identifier(self) -> Optional[str]: ...
@@ -6363,7 +6363,7 @@ class Task(GObject.Object, AsyncResult):
     def propagate_boolean(self) -> bool: ...
     def propagate_int(self) -> int: ...
     def propagate_pointer(self) -> None: ...
-    def propagate_value(self) -> Tuple[bool, Any]: ...
+    def propagate_value(self) -> tuple[bool, Any]: ...
     @staticmethod
     def report_error(
         source_object: Optional[GObject.Object],
@@ -6702,7 +6702,7 @@ class TlsConnection(IOStream):
     def get_certificate(self) -> Optional[TlsCertificate]: ...
     def get_channel_binding_data(
         self, type: TlsChannelBindingType
-    ) -> Tuple[bool, bytes]: ...
+    ) -> tuple[bool, bytes]: ...
     def get_ciphersuite_name(self) -> Optional[str]: ...
     def get_database(self) -> Optional[TlsDatabase]: ...
     def get_interaction(self) -> Optional[TlsInteraction]: ...
@@ -7278,7 +7278,7 @@ class UnixMountMonitorClass(GObject.GPointer): ...
 
 class UnixMountPoint(GObject.GBoxed):
     @staticmethod
-    def at(mount_path: str) -> Tuple[Optional[UnixMountPoint], int]: ...
+    def at(mount_path: str) -> tuple[Optional[UnixMountPoint], int]: ...
     def compare(self, mount2: UnixMountPoint) -> int: ...
     def copy(self) -> UnixMountPoint: ...
     def free(self) -> None: ...
diff --git a/src/gi-stubs/repository/_Gdk4.pyi b/src/gi-stubs/repository/_Gdk4.pyi
index 735efba..7ab33cd 100644
--- a/src/gi-stubs/repository/_Gdk4.pyi
+++ b/src/gi-stubs/repository/_Gdk4.pyi
@@ -2987,8 +2987,8 @@ class Display(GObject.Object):
     @staticmethod
     def get_default() -> Optional[Display]: ...
     def get_default_seat(self) -> Optional[Seat]: ...
-    def get_monitor_at_surface(self, surface: Surface) -> Optional[Monitor]: ...
-    def get_monitors(self) -> Gio.ListModel: ...
+    def get_monitor_at_surface(self, surface: Surface) -> Monitor | None: ...
+    def get_monitors(self) -> Gio.ListModel[Monitor]: ...
     def get_name(self) -> str: ...
     def get_primary_clipboard(self) -> Clipboard: ...
     def get_setting(self, name: str, value: Any) -> bool: ...
